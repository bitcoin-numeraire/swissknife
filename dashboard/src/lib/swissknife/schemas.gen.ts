// This file is auto-generated by @hey-api/openapi-ts

export const ApiKeyResponseSchema = {
  type: 'object',
  required: ['id', 'user_id', 'name', 'permissions', 'created_at'],
  properties: {
    created_at: {
      type: 'string',
      format: 'date-time',
    },
    description: {
      type: ['string', 'null'],
    },
    expires_at: {
      type: ['string', 'null'],
      format: 'date-time',
    },
    id: {
      type: 'string',
      format: 'uuid',
    },
    key: {
      type: ['string', 'null'],
    },
    name: {
      type: 'string',
    },
    permissions: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/Permission',
      },
    },
    user_id: {
      type: 'string',
    },
  },
} as const;

export const BalanceSchema = {
  type: 'object',
  required: ['received_msat', 'sent_msat', 'fees_paid_msat', 'available_msat'],
  properties: {
    available_msat: {
      type: 'integer',
      format: 'int64',
      example: 989999000,
    },
    fees_paid_msat: {
      type: 'integer',
      format: 'int64',
      minimum: 0,
    },
    received_msat: {
      type: 'integer',
      format: 'int64',
      example: 1000000000,
      minimum: 0,
    },
    sent_msat: {
      type: 'integer',
      format: 'int64',
      example: 10000000,
      minimum: 0,
    },
  },
} as const;

export const CheckMessageRequestSchema = {
  type: 'object',
  required: ['message', 'signature', 'pubkey'],
  properties: {
    message: {
      type: 'string',
      example: 'my message...',
    },
    pubkey: {
      type: 'string',
      example: '021e15c10d72f86a79323d1e3a42...',
    },
    signature: {
      type: 'string',
      example: 'd7norubk1xweo96ompcgqg4g4gyy...',
    },
  },
} as const;

export const CheckMessageResponseSchema = {
  type: 'object',
  required: ['is_valid'],
  properties: {
    is_valid: {
      type: 'boolean',
    },
  },
} as const;

export const ConnectLSPRequestSchema = {
  type: 'object',
  required: ['lsp_id'],
  properties: {
    lsp_id: {
      type: 'string',
      example: '3e8822d5-00de-4fa3-a30e-c2d31f5454e8',
    },
  },
} as const;

export const ContactSchema = {
  type: 'object',
  required: ['ln_address', 'contact_since'],
  properties: {
    contact_since: {
      type: 'string',
      format: 'date-time',
    },
    ln_address: {
      type: 'string',
      example: 'dario_nakamoto@numeraire.tech',
    },
  },
} as const;

export const CreateApiKeyRequestSchema = {
  type: 'object',
  required: ['name', 'permissions'],
  properties: {
    description: {
      type: ['string', 'null'],
    },
    expiry: {
      type: ['integer', 'null'],
      format: 'int32',
      minimum: 0,
    },
    name: {
      type: 'string',
    },
    permissions: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/Permission',
      },
    },
    user_id: {
      type: ['string', 'null'],
    },
  },
} as const;

export const CurrencySchema = {
  type: 'string',
  enum: ['Bitcoin', 'BitcoinTestnet', 'Regtest', 'Simnet', 'Signet'],
} as const;

export const ErrorResponseSchema = {
  type: 'object',
  required: ['status', 'reason'],
  properties: {
    reason: {
      type: 'string',
      example: 'error message',
    },
    status: {
      type: 'string',
      example: '401 Unauthorized',
    },
  },
} as const;

export const HealthCheckSchema = {
  type: 'object',
  required: ['database', 'ln_provider', 'is_healthy'],
  properties: {
    database: {
      $ref: '#/components/schemas/HealthStatus',
    },
    is_healthy: {
      type: 'boolean',
    },
    ln_provider: {
      $ref: '#/components/schemas/HealthStatus',
    },
  },
} as const;

export const HealthStatusSchema = {
  type: 'string',
  enum: ['Operational', 'Unavailable', 'Maintenance'],
} as const;

export const InvoiceOrderBySchema = {
  type: 'string',
  enum: ['CreatedAt', 'PaymentTime', 'UpdatedAt'],
} as const;

export const InvoiceResponseSchema = {
  type: 'object',
  required: ['id', 'wallet_id', 'timestamp', 'status', 'ledger', 'currency', 'created_at'],
  properties: {
    amount_msat: {
      type: ['integer', 'null'],
      format: 'int64',
      minimum: 0,
    },
    amount_received_msat: {
      type: ['integer', 'null'],
      format: 'int64',
      minimum: 0,
    },
    created_at: {
      type: 'string',
      format: 'date-time',
    },
    currency: {
      $ref: '#/components/schemas/Currency',
    },
    description: {
      type: ['string', 'null'],
    },
    fee_msat: {
      type: ['integer', 'null'],
      format: 'int64',
      minimum: 0,
    },
    id: {
      type: 'string',
      format: 'uuid',
    },
    ledger: {
      $ref: '#/components/schemas/Ledger',
    },
    ln_address_id: {
      type: ['string', 'null'],
      format: 'uuid',
    },
    ln_invoice: {
      oneOf: [
        {
          type: 'null',
        },
        {
          $ref: '#/components/schemas/LnInvoiceResponse',
        },
      ],
    },
    payment_time: {
      type: ['string', 'null'],
      format: 'date-time',
    },
    status: {
      $ref: '#/components/schemas/InvoiceStatus',
    },
    timestamp: {
      type: 'string',
      format: 'date-time',
    },
    updated_at: {
      type: ['string', 'null'],
      format: 'date-time',
    },
    wallet_id: {
      type: 'string',
      format: 'uuid',
    },
  },
} as const;

export const InvoiceStatusSchema = {
  type: 'string',
  enum: ['Pending', 'Settled', 'Expired'],
} as const;

export const LedgerSchema = {
  type: 'string',
  enum: ['Lightning', 'Internal', 'Onchain'],
} as const;

export const LnAddressSchema = {
  type: 'object',
  required: ['id', 'wallet_id', 'username', 'active', 'allows_nostr', 'created_at'],
  properties: {
    active: {
      type: 'boolean',
    },
    allows_nostr: {
      type: 'boolean',
    },
    created_at: {
      type: 'string',
      format: 'date-time',
    },
    id: {
      type: 'string',
      format: 'uuid',
    },
    nostr_pubkey: {
      type: ['string', 'null'],
      example: 'd9c2ec59a98c...',
    },
    updated_at: {
      type: ['string', 'null'],
      format: 'date-time',
    },
    username: {
      type: 'string',
    },
    wallet_id: {
      type: 'string',
      format: 'uuid',
    },
  },
} as const;

export const LnInvoiceResponseSchema = {
  type: 'object',
  required: ['payment_hash', 'bolt11', 'payee_pubkey', 'min_final_cltv_expiry_delta', 'payment_secret', 'expiry', 'expires_at'],
  properties: {
    bolt11: {
      type: 'string',
      example: 'lnbcrt1m1png24kasp5...',
    },
    description_hash: {
      type: ['string', 'null'],
    },
    expires_at: {
      type: 'string',
      format: 'date-time',
    },
    expiry: {
      type: 'string',
      example: 3600,
    },
    min_final_cltv_expiry_delta: {
      type: 'integer',
      format: 'int64',
      example: 10,
      minimum: 0,
    },
    payee_pubkey: {
      type: 'string',
      example: '02086a3f5b67ac4c43...',
    },
    payment_hash: {
      type: 'string',
      example: 'b587c7f76339e3fb87ad2b...',
    },
    payment_secret: {
      type: 'string',
      example: '019a32e03bb375a42bc...',
    },
  },
} as const;

export const LnURLPayRequestSchema = {
  type: 'object',
  required: ['callback', 'maxSendable', 'minSendable', 'metadata', 'commentAllowed', 'tag', 'allowsNostr'],
  properties: {
    allowsNostr: {
      type: 'boolean',
    },
    callback: {
      type: 'string',
      example: 'https://numeraire.tech/lnurlp/dario_nakamoto/callback',
    },
    commentAllowed: {
      type: 'integer',
      format: 'int32',
      example: 255,
      minimum: 0,
    },
    maxSendable: {
      type: 'integer',
      format: 'int64',
      example: 1000000000,
      minimum: 0,
    },
    metadata: {
      type: 'string',
      example: '[["text/plain","dario_nakamoto never refuses sats"],["text/identifier","dario_nakamoto@numeraire.tech"]]',
    },
    minSendable: {
      type: 'integer',
      format: 'int64',
      example: 1000,
      minimum: 0,
    },
    nostrPubkey: {
      type: ['string', 'null'],
      example: 'd9c2ec59a98c...',
    },
    tag: {
      type: 'string',
      example: 'payRequest',
    },
  },
} as const;

export const LnUrlCallbackResponseSchema = {
  type: 'object',
  required: ['pr', 'routes'],
  properties: {
    disposable: {
      type: ['boolean', 'null'],
    },
    pr: {
      type: 'string',
      example: 'lnbcrt1m1png24kasp5...',
    },
    routes: {
      type: 'array',
      items: {
        type: 'string',
      },
    },
    successAction: {},
  },
} as const;

export const LnUrlSuccessActionSchema = {
  type: 'object',
  required: ['tag'],
  properties: {
    description: {
      type: ['string', 'null'],
    },
    message: {
      type: ['string', 'null'],
    },
    tag: {
      type: 'string',
    },
    url: {
      type: ['string', 'null'],
    },
  },
} as const;

export const NewInvoiceRequestSchema = {
  type: 'object',
  required: ['amount_msat'],
  properties: {
    amount_msat: {
      type: 'integer',
      format: 'int64',
      minimum: 0,
    },
    description: {
      type: ['string', 'null'],
    },
    expiry: {
      type: ['integer', 'null'],
      format: 'int32',
      minimum: 0,
    },
    wallet_id: {
      type: ['string', 'null'],
      format: 'uuid',
    },
  },
} as const;

export const NostrNIP05ResponseSchema = {
  type: 'object',
  required: ['names'],
  properties: {
    names: {
      type: 'object',
      additionalProperties: {
        type: 'string',
      },
      propertyNames: {
        type: 'string',
      },
    },
  },
} as const;

export const OrderDirectionSchema = {
  type: 'string',
  enum: ['Asc', 'Desc'],
} as const;

export const PaymentResponseSchema = {
  type: 'object',
  required: ['id', 'wallet_id', 'amount_msat', 'currency', 'ledger', 'status', 'created_at'],
  properties: {
    amount_msat: {
      type: 'integer',
      format: 'int64',
      minimum: 0,
    },
    created_at: {
      type: 'string',
      format: 'date-time',
    },
    currency: {
      $ref: '#/components/schemas/Currency',
    },
    description: {
      type: ['string', 'null'],
    },
    error: {
      type: ['string', 'null'],
      example: 'failed to pay error message',
    },
    fee_msat: {
      type: ['integer', 'null'],
      format: 'int64',
      minimum: 0,
    },
    id: {
      type: 'string',
      format: 'uuid',
    },
    ledger: {
      $ref: '#/components/schemas/Ledger',
    },
    ln_address: {
      type: ['string', 'null'],
      example: 'hello@numeraire.tech',
    },
    metadata: {
      type: ['string', 'null'],
    },
    payment_hash: {
      type: ['string', 'null'],
      example: 'b587c7f76339e3fb87ad2b...',
    },
    payment_preimage: {
      type: ['string', 'null'],
    },
    payment_time: {
      type: ['string', 'null'],
      format: 'date-time',
    },
    status: {
      $ref: '#/components/schemas/PaymentStatus',
    },
    success_action: {
      oneOf: [
        {
          type: 'null',
        },
        {
          $ref: '#/components/schemas/LnUrlSuccessAction',
        },
      ],
    },
    updated_at: {
      type: ['string', 'null'],
      format: 'date-time',
    },
    wallet_id: {
      type: 'string',
      format: 'uuid',
    },
  },
} as const;

export const PaymentStatusSchema = {
  type: 'string',
  enum: ['Pending', 'Settled', 'Failed'],
} as const;

export const PermissionSchema = {
  type: 'string',
  enum: [
    'read:wallet',
    'write:wallet',
    'read:ln_address',
    'write:ln_address',
    'read:transaction',
    'write:transaction',
    'read:ln_node',
    'write:ln_node',
    'read:api_key',
    'write:api_key',
  ],
} as const;

export const RedeemOnchainRequestSchema = {
  type: 'object',
  required: ['to_address', 'feerate'],
  properties: {
    feerate: {
      type: 'integer',
      format: 'int32',
      example: '8',
      minimum: 0,
    },
    to_address: {
      type: 'string',
    },
  },
} as const;

export const RedeemOnchainResponseSchema = {
  type: 'object',
  required: ['txid'],
  properties: {
    txid: {
      type: 'string',
      example: 'ceb662f7e470e6...',
    },
  },
} as const;

export const RegisterLnAddressRequestSchema = {
  type: 'object',
  required: ['username'],
  properties: {
    allows_nostr: {
      type: 'boolean',
    },
    nostr_pubkey: {
      type: ['string', 'null'],
      example: 'npub1m8pwckdf3...',
    },
    username: {
      type: 'string',
    },
    wallet_id: {
      type: ['string', 'null'],
      format: 'uuid',
    },
  },
} as const;

export const RegisterWalletRequestSchema = {
  type: 'object',
  required: ['user_id'],
  properties: {
    user_id: {
      type: 'string',
    },
  },
} as const;

export const SendOnchainPaymentRequestSchema = {
  type: 'object',
  required: ['amount_msat', 'recipient_address', 'feerate'],
  properties: {
    amount_msat: {
      type: 'integer',
      format: 'int64',
      example: 100000000,
      minimum: 0,
    },
    feerate: {
      type: 'integer',
      format: 'int32',
      example: '8',
      minimum: 0,
    },
    recipient_address: {
      type: 'string',
      example: 'bc1q7jys2n3jjf9t25r6ut369taap8v38pgqekq8v4',
    },
  },
} as const;

export const SendPaymentRequestSchema = {
  type: 'object',
  required: ['input'],
  properties: {
    amount_msat: {
      type: ['integer', 'null'],
      format: 'int64',
      minimum: 0,
    },
    comment: {
      type: ['string', 'null'],
    },
    input: {
      type: 'string',
      example: 'hello@numeraire.tech',
    },
    wallet_id: {
      type: ['string', 'null'],
      format: 'uuid',
    },
  },
} as const;

export const SignInRequestSchema = {
  type: 'object',
  required: ['password'],
  properties: {
    password: {
      type: 'string',
      example: 'password_from_config_file',
    },
  },
} as const;

export const SignInResponseSchema = {
  type: 'object',
  required: ['token'],
  properties: {
    token: {
      type: 'string',
      example: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJ...',
    },
  },
} as const;

export const SignMessageRequestSchema = {
  type: 'object',
  required: ['message'],
  properties: {
    message: {
      type: 'string',
      example: 'my message...',
    },
  },
} as const;

export const SignMessageResponseSchema = {
  type: 'object',
  required: ['signature'],
  properties: {
    signature: {
      type: 'string',
      example: 'd7norubk1xweo96ompcgqg4g4gyy...',
    },
  },
} as const;

export const UpdateLnAddressRequestSchema = {
  type: 'object',
  properties: {
    active: {
      type: ['boolean', 'null'],
    },
    allows_nostr: {
      type: ['boolean', 'null'],
    },
    nostr_pubkey: {
      type: ['string', 'null'],
      example: 'npub1m8pwckdf3...',
    },
    username: {
      type: ['string', 'null'],
    },
  },
} as const;

export const VersionInfoSchema = {
  type: 'object',
  required: ['version', 'build_time'],
  properties: {
    build_time: {
      type: 'string',
      example: '2024-07-03T18:13:09.093289+00:00',
    },
    version: {
      type: 'string',
      example: '0.0.1',
    },
  },
} as const;

export const WalletOverviewSchema = {
  type: 'object',
  required: ['id', 'user_id', 'balance', 'n_payments', 'n_invoices', 'n_contacts', 'created_at'],
  properties: {
    balance: {
      $ref: '#/components/schemas/Balance',
    },
    created_at: {
      type: 'string',
      format: 'date-time',
    },
    id: {
      type: 'string',
      format: 'uuid',
    },
    ln_address_id: {
      type: ['string', 'null'],
      format: 'uuid',
    },
    ln_address_username: {
      type: ['string', 'null'],
    },
    n_contacts: {
      type: 'integer',
      format: 'int32',
      minimum: 0,
    },
    n_invoices: {
      type: 'integer',
      format: 'int32',
      minimum: 0,
    },
    n_payments: {
      type: 'integer',
      format: 'int32',
      minimum: 0,
    },
    updated_at: {
      type: ['string', 'null'],
      format: 'date-time',
    },
    user_id: {
      type: 'string',
    },
  },
} as const;

export const WalletResponseSchema = {
  type: 'object',
  required: ['id', 'user_id', 'balance', 'payments', 'invoices', 'contacts', 'created_at'],
  properties: {
    balance: {
      $ref: '#/components/schemas/Balance',
    },
    contacts: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/Contact',
      },
    },
    created_at: {
      type: 'string',
      format: 'date-time',
    },
    id: {
      type: 'string',
      format: 'uuid',
    },
    invoices: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/InvoiceResponse',
      },
    },
    ln_address: {
      oneOf: [
        {
          type: 'null',
        },
        {
          $ref: '#/components/schemas/LnAddress',
        },
      ],
    },
    payments: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/PaymentResponse',
      },
    },
    updated_at: {
      type: ['string', 'null'],
      format: 'date-time',
    },
    user_id: {
      type: 'string',
    },
  },
} as const;
