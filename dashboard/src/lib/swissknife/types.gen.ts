// This file is auto-generated by @hey-api/openapi-ts

/**
 * API Key Response
 */
export type ApiKeyResponse = {
  /**
   * Date of creation in database
   */
  created_at: Date;
  /**
   * API key description
   */
  description?: string | null;
  /**
   * Date of expiration
   */
  expires_at?: Date | null;
  /**
   * Internal ID
   */
  id: string;
  /**
   * API key (only returned once on creation, save it securely as it cannot be retrieved)
   */
  key?: string | null;
  /**
   * API key name
   */
  name: string;
  /**
   * List of permissions for this API key
   */
  permissions: Array<Permission>;
  /**
   * User ID
   */
  user_id: string;
};

export type Balance = {
  /**
   * Amount available to spend
   */
  available_msat: number;
  /**
   * Total fees paid
   */
  fees_paid_msat: number;
  /**
   * Total amount received
   */
  received_msat: number;
  /**
   * Total amount sent
   */
  sent_msat: number;
};

export type CheckMessageRequest = {
  /**
   * Original message
   */
  message: string;
  /**
   * Node public key
   */
  pubkey: string;
  /**
   * zbase encoded signature
   */
  signature: string;
};

export type CheckMessageResponse = {
  /**
   * Signature validity
   */
  is_valid: boolean;
};

export type ConnectLSPRequest = {
  /**
   * LSP ID
   */
  lsp_id: string;
};

export type Contact = {
  /**
   * Date of first payment to this contact
   */
  contact_since: Date;
  /**
   * Lightning Address
   */
  ln_address: string;
};

/**
 * Create API Key Request
 */
export type CreateApiKeyRequest = {
  /**
   * API key description
   */
  description?: string | null;
  /**
   * Expiration time in seconds
   */
  expiry?: number | null;
  /**
   * API key name
   */
  name: string;
  /**
   * List of permissions for this API key
   */
  permissions: Array<Permission>;
  /**
   * User ID. Will be populated with your own ID by default
   */
  user_id?: string | null;
};

export type Currency = 'Bitcoin' | 'BitcoinTestnet' | 'Regtest' | 'Simnet' | 'Signet';

export const Currency = {
  BITCOIN: 'Bitcoin',
  BITCOIN_TESTNET: 'BitcoinTestnet',
  REGTEST: 'Regtest',
  SIMNET: 'Simnet',
  SIGNET: 'Signet',
} as const;

/**
 * Application Error Response
 */
export type ErrorResponse = {
  /**
   * Error reason
   */
  reason: string;
  /**
   * Error status
   */
  status: string;
};

/**
 * App Health Information
 */
export type HealthCheck = {
  /**
   * Health of the database
   */
  database: HealthStatus;
  /**
   * Whether the system is healthy and can be used
   */
  is_healthy: boolean;
  /**
   * Health of the Lightning provider service
   */
  ln_provider: HealthStatus;
};

export type HealthStatus = 'Operational' | 'Unavailable' | 'Maintenance';

export const HealthStatus = {
  OPERATIONAL: 'Operational',
  UNAVAILABLE: 'Unavailable',
  MAINTENANCE: 'Maintenance',
} as const;

export type InvoiceOrderBy = 'CreatedAt' | 'PaymentTime' | 'UpdatedAt';

export const InvoiceOrderBy = {
  CREATED_AT: 'CreatedAt',
  PAYMENT_TIME: 'PaymentTime',
  UPDATED_AT: 'UpdatedAt',
} as const;

export type InvoiceResponse = {
  /**
   * Amount requested in millisatoshis.
   */
  amount_msat?: number | null;
  /**
   * Amount received in millisatoshis.
   */
  amount_received_msat?: number | null;
  /**
   * Date of creation in database
   */
  created_at: Date;
  /**
   * Currency
   */
  currency: Currency;
  /**
   * Description
   */
  description?: string | null;
  /**
   * Fees paid. Populated when a new channel is opened to receive the funds.
   */
  fee_msat?: number | null;
  /**
   * Internal ID
   */
  id: string;
  /**
   * Ledger
   */
  ledger: Ledger;
  /**
   * Lightning Address. Populated when invoice is generated as part of the LNURL protocol
   */
  ln_address_id?: string | null;
  ln_invoice?: null | LnInvoiceResponse;
  /**
   * Payment time
   */
  payment_time?: Date | null;
  /**
   * Status
   */
  status: InvoiceStatus;
  /**
   * Date of creation on the LN node
   */
  timestamp: Date;
  /**
   * Date of update in database
   */
  updated_at?: Date | null;
  /**
   * Wallet ID
   */
  wallet_id: string;
};

export type InvoiceStatus = 'Pending' | 'Settled' | 'Expired';

export const InvoiceStatus = {
  PENDING: 'Pending',
  SETTLED: 'Settled',
  EXPIRED: 'Expired',
} as const;

export type Ledger = 'Lightning' | 'Internal' | 'Onchain';

export const Ledger = {
  LIGHTNING: 'Lightning',
  INTERNAL: 'Internal',
  ONCHAIN: 'Onchain',
} as const;

/**
 * Lightning Address
 */
export type LnAddress = {
  /**
   * Active status. Inactive addresses cannot receive funds
   */
  active: boolean;
  /**
   * Nostr enabled
   */
  allows_nostr: boolean;
  /**
   * Date of creation in database
   */
  created_at: Date;
  /**
   * Internal ID
   */
  id: string;
  /**
   * Nostr Public key
   */
  nostr_pubkey?: string | null;
  /**
   * Date of update in database
   */
  updated_at?: Date | null;
  /**
   * Username
   */
  username: string;
  /**
   * Wallet ID
   */
  wallet_id: string;
};

export type LnInvoiceResponse = {
  /**
   * Bolt11
   */
  bolt11: string;
  /**
   * Description hash
   */
  description_hash?: string | null;
  /**
   * Date of expiry
   */
  expires_at: Date;
  /**
   * Duration of expiry in seconds since creation
   */
  expiry: string;
  /**
   * The minimum number of blocks the final hop in the route should wait before allowing the payment to be claimed. This is a security measure to ensure that the payment can be settled properly
   */
  min_final_cltv_expiry_delta: number;
  /**
   * Public key of the node receiving the funds
   */
  payee_pubkey: string;
  /**
   * Payment hash
   */
  payment_hash: string;
  /**
   * A secret value included in the payment request to mitigate certain types of attacks. The payment secret must be provided by the payer when making the payment
   */
  payment_secret: string;
};

export type LnURLPayRequest = {
  /**
   * Nostr enabled
   */
  allowsNostr: boolean;
  /**
   * The URL from LN SERVICE to accept the pay request
   */
  callback: string;
  /**
   * Optional number of characters accepted for the `comment` query parameter on subsequent callback, defaults to 0 if not provided. (no comment allowed). See <https://github.com/lnurl/luds/blob/luds/12.md>
   */
  commentAllowed: number;
  /**
   * Max amount in milli-satoshis LN SERVICE is willing to receive
   */
  maxSendable: number;
  /**
   * Metadata json which must be presented as raw string here, this is required to pass signature verification at a later step
   */
  metadata: string;
  /**
   * Min amount in milli-satoshis LN SERVICE is willing to receive, can not be less than 1 or more than `maxSendable`
   */
  minSendable: number;
  /**
   * Nostr public key
   */
  nostrPubkey?: string | null;
  /**
   * Type of LNURL
   */
  tag: string;
};

export type LnUrlCallbackResponse = {
  /**
   * An optional flag to let a wallet know whether to persist the link from step 1, if null should be interpreted as true
   */
  disposable?: boolean | null;
  /**
   * bech32-serialized Lightning invoice
   */
  pr: string;
  /**
   * array with payment routes, should be left empty if no routes are to be provided
   */
  routes: Array<string>;
  /**
   * An optional action to be executed after successfully paying an invoice
   */
  successAction?: unknown;
};

export type LnUrlSuccessAction = {
  /**
   * Description
   */
  description?: string | null;
  /**
   * Message displayed to the user
   */
  message?: string | null;
  /**
   * Action type. One of `url` or `message`
   */
  tag: string;
  /**
   * URL for the user to open on success
   */
  url?: string | null;
};

/**
 * New Invoice Request
 */
export type NewInvoiceRequest = {
  /**
   * Amount in millisatoshis
   */
  amount_msat: number;
  /**
   * Description of the invoice. Visible by the payer
   */
  description?: string | null;
  /**
   * Expiration time in seconds
   */
  expiry?: number | null;
  /**
   * User ID. Will be populated with your own ID by default
   */
  wallet_id?: string | null;
};

export type NostrNIP05Response = {
  /**
   * Found names
   */
  names: {
    [key: string]: string;
  };
};

export type OrderDirection = 'Asc' | 'Desc';

export const OrderDirection = {
  ASC: 'Asc',
  DESC: 'Desc',
} as const;

export type PaymentResponse = {
  /**
   * Amount in millisatoshis.
   */
  amount_msat: number;
  /**
   * Date of creation in database
   */
  created_at: Date;
  /**
   * Currency
   */
  currency: Currency;
  /**
   * Description
   */
  description?: string | null;
  /**
   * Error message
   */
  error?: string | null;
  /**
   * Fees paid. Populated when a new channel is opened to receive the funds
   */
  fee_msat?: number | null;
  /**
   * Internal ID
   */
  id: string;
  /**
   * Ledger
   */
  ledger: Ledger;
  /**
   * Lightning Address. Populated when sending to a LN Address
   */
  ln_address?: string | null;
  /**
   * Metadata
   */
  metadata?: string | null;
  /**
   * Payment hash
   */
  payment_hash?: string | null;
  /**
   * Payment Preimage
   */
  payment_preimage?: string | null;
  /**
   * Payment time
   */
  payment_time?: Date | null;
  /**
   * Status
   */
  status: PaymentStatus;
  success_action?: null | LnUrlSuccessAction;
  /**
   * Date of update in database
   */
  updated_at?: Date | null;
  /**
   * Wallet ID
   */
  wallet_id: string;
};

export type PaymentStatus = 'Pending' | 'Settled' | 'Failed';

export const PaymentStatus = {
  PENDING: 'Pending',
  SETTLED: 'Settled',
  FAILED: 'Failed',
} as const;

export type Permission =
  | 'read:wallet'
  | 'write:wallet'
  | 'read:ln_address'
  | 'write:ln_address'
  | 'read:transaction'
  | 'write:transaction'
  | 'read:ln_node'
  | 'write:ln_node'
  | 'read:api_key'
  | 'write:api_key';

export const Permission = {
  READ_WALLET: 'read:wallet',
  WRITE_WALLET: 'write:wallet',
  READ_LN_ADDRESS: 'read:ln_address',
  WRITE_LN_ADDRESS: 'write:ln_address',
  READ_TRANSACTION: 'read:transaction',
  WRITE_TRANSACTION: 'write:transaction',
  READ_LN_NODE: 'read:ln_node',
  WRITE_LN_NODE: 'write:ln_node',
  READ_API_KEY: 'read:api_key',
  WRITE_API_KEY: 'write:api_key',
} as const;

export type RedeemOnchainRequest = {
  /**
   * Fee rate in sats/vb
   */
  feerate: number;
  /**
   * Recipient BTC address
   */
  to_address: string;
};

export type RedeemOnchainResponse = {
  /**
   * Transaction ID
   */
  txid: string;
};

export type RegisterLnAddressRequest = {
  /**
   * Nostr enabled
   */
  allows_nostr?: boolean;
  /**
   * Nostr public key
   */
  nostr_pubkey?: string | null;
  /**
   * Username such as `username@domain`
   */
  username: string;
  /**
   * Wallet ID. Will be populated with your own ID by default
   */
  wallet_id?: string | null;
};

/**
 * Register Wallet Request
 */
export type RegisterWalletRequest = {
  /**
   * User ID. Should ideally be registered in your Auth provider.
   */
  user_id: string;
};

/**
 * Send On-chain Payment Request
 */
export type SendOnchainPaymentRequest = {
  /**
   * Amount in millisatoshis
   */
  amount_msat: number;
  /**
   * Fee rate in sats/vb
   */
  feerate: number;
  /**
   * Recipient Bitcoin address
   */
  recipient_address: string;
};

/**
 * Send Payment Request
 */
export type SendPaymentRequest = {
  /**
   * Amount in millisatoshis. Only necessary if the input does not specify an amount (empty Bolt11, LNURL or LN Address)
   */
  amount_msat?: number | null;
  /**
   * Comment of the payment. Visible by the recipient for LNURL payments
   */
  comment?: string | null;
  /**
   * Recipient. Can be a Bolt11 invoice, LNURL or LN Address. Keysend and On-chain payments not yet supported
   */
  input: string;
  /**
   * Wallet ID. Will be populated with your own ID by default
   */
  wallet_id?: string | null;
};

/**
 * Sign In Request
 */
export type SignInRequest = {
  /**
   * User password
   */
  password: string;
};

/**
 * Sign In Response
 */
export type SignInResponse = {
  /**
   * JWT token
   */
  token: string;
};

export type SignMessageRequest = {
  /**
   * Message
   */
  message: string;
};

export type SignMessageResponse = {
  /**
   * zbase encoded signature
   */
  signature: string;
};

export type UpdateLnAddressRequest = {
  /**
   * Active status
   */
  active?: boolean | null;
  /**
   * Nostr enabled
   */
  allows_nostr?: boolean | null;
  /**
   * Nostr public key
   */
  nostr_pubkey?: string | null;
  /**
   * Username such as `username@domain`
   */
  username?: string | null;
};

/**
 * App version info
 */
export type VersionInfo = {
  /**
   * Build time of the software
   */
  build_time: string;
  /**
   * Current version of the software
   */
  version: string;
};

export type WalletOverview = {
  /**
   * User Balance
   */
  balance: Balance;
  /**
   * Date of creation in database
   */
  created_at: Date;
  /**
   * Internal ID
   */
  id: string;
  /**
   * Lightning Address ID
   */
  ln_address_id?: string | null;
  /**
   * Lightning Address Username
   */
  ln_address_username?: string | null;
  /**
   * Number of contacts
   */
  n_contacts: number;
  /**
   * Number of invoices
   */
  n_invoices: number;
  /**
   * Number of payments
   */
  n_payments: number;
  /**
   * Date of update in database
   */
  updated_at?: Date | null;
  /**
   * User ID. Populated from the Authentication method,  such as JWT subject
   */
  user_id: string;
};

export type WalletResponse = {
  /**
   * User Balance
   */
  balance: Balance;
  /**
   * List of contacts
   */
  contacts: Array<Contact>;
  /**
   * Date of creation in database
   */
  created_at: Date;
  /**
   * Internal ID
   */
  id: string;
  /**
   * Lit of Invoices
   */
  invoices: Array<InvoiceResponse>;
  ln_address?: null | LnAddress;
  /**
   * List of payments
   */
  payments: Array<PaymentResponse>;
  /**
   * Date of update in database
   */
  updated_at?: Date | null;
  /**
   * User ID. Populated from the Authentication method,  such as JWT subject
   */
  user_id: string;
};

export type WellKnownData = {
  path: {
    username: string;
  };
};

export type WellKnownResponse = LnURLPayRequest;

export type WellKnownError = ErrorResponse;

export type WellKnownNostrData = {
  query?: {
    /**
     * Username to query
     */
    name?: string;
  };
};

export type WellKnownNostrResponse = NostrNIP05Response;

export type WellKnownNostrError = ErrorResponse;

export type CallbackData = {
  path: {
    username: string;
  };
  query: {
    /**
     * Amount in millisatoshis
     */
    amount: number;
    /**
     * Optional comment for the recipient
     */
    comment?: string | null;
  };
};

export type CallbackResponse = LnUrlCallbackResponse;

export type CallbackError = ErrorResponse;

export type ListApiKeysData = {
  query?: {
    /**
     * List of IDs
     */
    ids?: Array<string> | null;
    /**
     * Total amount of results to return
     */
    limit?: number | null;
    /**
     * Offset where to start returning results
     */
    offset?: number | null;
    /**
     * Direction of the ordering of results
     */
    order_direction?: OrderDirection;
    /**
     * User ID. Automatically populated with your ID
     */
    user_id?: string | null;
  };
};

export type ListApiKeysResponse = Array<ApiKeyResponse>;

export type ListApiKeysError = ErrorResponse;

export type CreateApiKeyData = {
  body: CreateApiKeyRequest;
};

export type CreateApiKeyResponse = ApiKeyResponse;

export type CreateApiKeyError = ErrorResponse;

export type RevokeApiKeysData = {
  query?: {
    /**
     * List of IDs
     */
    ids?: Array<string> | null;
    /**
     * Total amount of results to return
     */
    limit?: number | null;
    /**
     * Offset where to start returning results
     */
    offset?: number | null;
    /**
     * Direction of the ordering of results
     */
    order_direction?: OrderDirection;
    /**
     * User ID. Automatically populated with your ID
     */
    user_id?: string | null;
  };
};

export type RevokeApiKeysResponse = number;

export type RevokeApiKeysError = ErrorResponse;

export type GetApiKeyData = {
  path: {
    id: string;
  };
};

export type GetApiKeyResponse = ApiKeyResponse;

export type GetApiKeyError = ErrorResponse;

export type RevokeApiKeyData = {
  path: {
    id: string;
  };
};

export type RevokeApiKeyResponse = unknown;

export type RevokeApiKeyError = ErrorResponse;

export type SignInData = {
  body: SignInRequest;
};

export type SignInResponse2 = SignInResponse;

export type SignInError = ErrorResponse;

export type ListInvoicesData = {
  query?: {
    /**
     * List of IDs
     */
    ids?: Array<string> | null;
    /**
     * Ledger
     */
    ledger?: null | Ledger;
    /**
     * Total amount of results to return
     */
    limit?: number | null;
    /**
     * Offset where to start returning results
     */
    offset?: number | null;
    /**
     * Order by
     */
    order_by?: InvoiceOrderBy;
    /**
     * Direction of the ordering of results
     */
    order_direction?: OrderDirection;
    /**
     * Status
     */
    status?: null | InvoiceStatus;
    /**
     * Wallet ID. Automatically populated with your ID
     */
    wallet_id?: string | null;
  };
};

export type ListInvoicesResponse = Array<InvoiceResponse>;

export type ListInvoicesError = ErrorResponse;

export type GenerateInvoiceData = {
  body: NewInvoiceRequest;
};

export type GenerateInvoiceResponse = InvoiceResponse;

export type GenerateInvoiceError = ErrorResponse;

export type DeleteInvoicesData = {
  query?: {
    /**
     * List of IDs
     */
    ids?: Array<string> | null;
    /**
     * Ledger
     */
    ledger?: null | Ledger;
    /**
     * Total amount of results to return
     */
    limit?: number | null;
    /**
     * Offset where to start returning results
     */
    offset?: number | null;
    /**
     * Order by
     */
    order_by?: InvoiceOrderBy;
    /**
     * Direction of the ordering of results
     */
    order_direction?: OrderDirection;
    /**
     * Status
     */
    status?: null | InvoiceStatus;
    /**
     * Wallet ID. Automatically populated with your ID
     */
    wallet_id?: string | null;
  };
};

export type DeleteInvoicesResponse = number;

export type DeleteInvoicesError = ErrorResponse;

export type GetInvoiceData = {
  path: {
    id: string;
  };
};

export type GetInvoiceResponse = InvoiceResponse;

export type GetInvoiceError = ErrorResponse;

export type DeleteInvoiceData = {
  path: {
    id: string;
  };
};

export type DeleteInvoiceResponse = unknown;

export type DeleteInvoiceError = ErrorResponse;

export type ListAddressesData = {
  query?: {
    /**
     * Active
     */
    active?: boolean | null;
    /**
     * List of IDs
     */
    ids?: Array<string> | null;
    /**
     * Total amount of results to return
     */
    limit?: number | null;
    /**
     * Offset where to start returning results
     */
    offset?: number | null;
    /**
     * Direction of the ordering of results
     */
    order_direction?: OrderDirection;
    /**
     * Username
     */
    username?: string | null;
    /**
     * wallet ID. Automatically populated with your ID
     */
    wallet_id?: string | null;
  };
};

export type ListAddressesResponse = Array<LnAddress>;

export type ListAddressesError = ErrorResponse;

export type RegisterAddressData = {
  body: RegisterLnAddressRequest;
};

export type RegisterAddressResponse = LnAddress;

export type RegisterAddressError = ErrorResponse;

export type DeleteAddressesData = {
  query?: {
    /**
     * Active
     */
    active?: boolean | null;
    /**
     * List of IDs
     */
    ids?: Array<string> | null;
    /**
     * Total amount of results to return
     */
    limit?: number | null;
    /**
     * Offset where to start returning results
     */
    offset?: number | null;
    /**
     * Direction of the ordering of results
     */
    order_direction?: OrderDirection;
    /**
     * Username
     */
    username?: string | null;
    /**
     * wallet ID. Automatically populated with your ID
     */
    wallet_id?: string | null;
  };
};

export type DeleteAddressesResponse = number;

export type DeleteAddressesError = ErrorResponse;

export type GetAddressData = {
  path: {
    id: string;
  };
};

export type GetAddressResponse = LnAddress;

export type GetAddressError = ErrorResponse;

export type UpdateAddressData = {
  body: UpdateLnAddressRequest;
  path: {
    id: string;
  };
};

export type UpdateAddressResponse = LnAddress;

export type UpdateAddressError = ErrorResponse;

export type DeleteAddressData = {
  path: {
    id: string;
  };
};

export type DeleteAddressResponse = unknown;

export type DeleteAddressError = ErrorResponse;

export type BackupResponse = unknown;

export type BackupError = ErrorResponse;

export type CheckMessageData = {
  body: CheckMessageRequest;
};

export type CheckMessageResponse2 = CheckMessageResponse;

export type CheckMessageError = ErrorResponse;

export type CloseLspChannelsResponse = Array<string>;

export type CloseLspChannelsError = ErrorResponse;

export type ConnectLspData = {
  body: ConnectLSPRequest;
};

export type ConnectLspResponse = unknown;

export type ConnectLspError = ErrorResponse;

export type NodeInfoResponse = unknown;

export type NodeInfoError = ErrorResponse;

export type LspInfoResponse = unknown;

export type LspInfoError = ErrorResponse;

export type ListLspsResponse = Array<unknown>;

export type ListLspsError = ErrorResponse;

export type RedeemData = {
  body: RedeemOnchainRequest;
};

export type RedeemResponse = RedeemOnchainResponse;

export type RedeemError = ErrorResponse;

export type SignMessageData = {
  body: SignMessageRequest;
};

export type SignMessageResponse2 = SignMessageResponse;

export type SignMessageError = ErrorResponse;

export type SwapData = {
  body: SendOnchainPaymentRequest;
};

export type SwapResponse = unknown;

export type SwapError = ErrorResponse;

export type SyncResponse = unknown;

export type SyncError = ErrorResponse;

export type GetUserWalletResponse = WalletResponse;

export type GetUserWalletError = ErrorResponse;

export type ListWalletApiKeysData = {
  query?: {
    /**
     * List of IDs
     */
    ids?: Array<string> | null;
    /**
     * Total amount of results to return
     */
    limit?: number | null;
    /**
     * Offset where to start returning results
     */
    offset?: number | null;
    /**
     * Direction of the ordering of results
     */
    order_direction?: OrderDirection;
    /**
     * User ID. Automatically populated with your ID
     */
    user_id?: string | null;
  };
};

export type ListWalletApiKeysResponse = Array<ApiKeyResponse>;

export type ListWalletApiKeysError = ErrorResponse;

export type CreateWalletApiKeyData = {
  body: CreateApiKeyRequest;
};

export type CreateWalletApiKeyResponse = ApiKeyResponse;

export type CreateWalletApiKeyError = ErrorResponse;

export type RevokeWalletApiKeysData = {
  query?: {
    /**
     * List of IDs
     */
    ids?: Array<string> | null;
    /**
     * Total amount of results to return
     */
    limit?: number | null;
    /**
     * Offset where to start returning results
     */
    offset?: number | null;
    /**
     * Direction of the ordering of results
     */
    order_direction?: OrderDirection;
    /**
     * User ID. Automatically populated with your ID
     */
    user_id?: string | null;
  };
};

export type RevokeWalletApiKeysResponse = number;

export type RevokeWalletApiKeysError = ErrorResponse;

export type GetWalletApiKeyData = {
  path: {
    id: string;
  };
};

export type GetWalletApiKeyResponse = ApiKeyResponse;

export type GetWalletApiKeyError = ErrorResponse;

export type RevokeWalletApiKeyData = {
  path: {
    id: string;
  };
};

export type RevokeWalletApiKeyResponse = unknown;

export type RevokeWalletApiKeyError = ErrorResponse;

export type GetWalletBalanceResponse = Balance;

export type GetWalletBalanceError = ErrorResponse;

export type ListContactsResponse = Array<Contact>;

export type ListContactsError = ErrorResponse;

export type ListWalletInvoicesData = {
  query?: {
    /**
     * List of IDs
     */
    ids?: Array<string> | null;
    /**
     * Ledger
     */
    ledger?: null | Ledger;
    /**
     * Total amount of results to return
     */
    limit?: number | null;
    /**
     * Offset where to start returning results
     */
    offset?: number | null;
    /**
     * Order by
     */
    order_by?: InvoiceOrderBy;
    /**
     * Direction of the ordering of results
     */
    order_direction?: OrderDirection;
    /**
     * Status
     */
    status?: null | InvoiceStatus;
    /**
     * Wallet ID. Automatically populated with your ID
     */
    wallet_id?: string | null;
  };
};

export type ListWalletInvoicesResponse = Array<InvoiceResponse>;

export type ListWalletInvoicesError = ErrorResponse;

export type NewWalletInvoiceData = {
  body: NewInvoiceRequest;
};

export type NewWalletInvoiceResponse = InvoiceResponse;

export type NewWalletInvoiceError = ErrorResponse;

export type DeleteExpiredInvoicesResponse = number;

export type DeleteExpiredInvoicesError = ErrorResponse;

export type GetWalletInvoiceData = {
  path: {
    id: string;
  };
};

export type GetWalletInvoiceResponse = InvoiceResponse;

export type GetWalletInvoiceError = ErrorResponse;

export type GetWalletAddressResponse = LnAddress;

export type GetWalletAddressError = ErrorResponse;

export type UpdateWalletAddressData = {
  body: UpdateLnAddressRequest;
};

export type UpdateWalletAddressResponse = LnAddress;

export type UpdateWalletAddressError = ErrorResponse;

export type RegisterWalletAddressData = {
  body: RegisterLnAddressRequest;
};

export type RegisterWalletAddressResponse = LnAddress;

export type RegisterWalletAddressError = ErrorResponse;

export type DeleteWalletAddressResponse = unknown;

export type DeleteWalletAddressError = ErrorResponse;

export type ListWalletPaymentsData = {
  query?: {
    /**
     * List of IDs
     */
    ids?: Array<string> | null;
    /**
     * Ledger
     */
    ledger?: null | Ledger;
    /**
     * Total amount of results to return
     */
    limit?: number | null;
    /**
     * Offset where to start returning results
     */
    offset?: number | null;
    /**
     * Direction of the ordering of results
     */
    order_direction?: OrderDirection;
    /**
     * Status
     */
    status?: null | PaymentStatus;
    /**
     * Wallet ID. Automatically populated with your ID
     */
    wallet_id?: string | null;
  };
};

export type ListWalletPaymentsResponse = Array<PaymentResponse>;

export type ListWalletPaymentsError = ErrorResponse;

export type WalletPayData = {
  body: SendPaymentRequest;
};

export type WalletPayResponse = PaymentResponse;

export type WalletPayError = ErrorResponse;

export type DeleteFailedPaymentsResponse = number;

export type DeleteFailedPaymentsError = ErrorResponse;

export type GetWalletPaymentData = {
  path: {
    id: string;
  };
};

export type GetWalletPaymentResponse = PaymentResponse;

export type GetWalletPaymentError = ErrorResponse;

export type ListPaymentsData = {
  query?: {
    /**
     * List of IDs
     */
    ids?: Array<string> | null;
    /**
     * Ledger
     */
    ledger?: null | Ledger;
    /**
     * Total amount of results to return
     */
    limit?: number | null;
    /**
     * Offset where to start returning results
     */
    offset?: number | null;
    /**
     * Direction of the ordering of results
     */
    order_direction?: OrderDirection;
    /**
     * Status
     */
    status?: null | PaymentStatus;
    /**
     * Wallet ID. Automatically populated with your ID
     */
    wallet_id?: string | null;
  };
};

export type ListPaymentsResponse = Array<PaymentResponse>;

export type ListPaymentsError = ErrorResponse;

export type PayData = {
  body: SendPaymentRequest;
};

export type PayResponse = PaymentResponse;

export type PayError = ErrorResponse;

export type DeletePaymentsData = {
  query?: {
    /**
     * List of IDs
     */
    ids?: Array<string> | null;
    /**
     * Ledger
     */
    ledger?: null | Ledger;
    /**
     * Total amount of results to return
     */
    limit?: number | null;
    /**
     * Offset where to start returning results
     */
    offset?: number | null;
    /**
     * Direction of the ordering of results
     */
    order_direction?: OrderDirection;
    /**
     * Status
     */
    status?: null | PaymentStatus;
    /**
     * Wallet ID. Automatically populated with your ID
     */
    wallet_id?: string | null;
  };
};

export type DeletePaymentsResponse = number;

export type DeletePaymentsError = ErrorResponse;

export type GetPaymentData = {
  path: {
    id: string;
  };
};

export type GetPaymentResponse = PaymentResponse;

export type GetPaymentError = ErrorResponse;

export type DeletePaymentData = {
  path: {
    id: string;
  };
};

export type DeletePaymentResponse = unknown;

export type DeletePaymentError = ErrorResponse;

export type HealthCheckResponse = HealthCheck;

export type HealthCheckError = HealthCheck;

export type ReadinessCheckResponse = unknown;

export type ReadinessCheckError = unknown;

export type VersionCheckResponse = VersionInfo;

export type VersionCheckError = unknown;

export type ListWalletsResponse = Array<WalletResponse>;

export type ListWalletsError = ErrorResponse;

export type RegisterWalletData = {
  body: RegisterWalletRequest;
};

export type RegisterWalletResponse = WalletResponse;

export type RegisterWalletError = ErrorResponse;

export type DeleteWalletsData = {
  query?: {
    /**
     * List of IDs
     */
    ids?: Array<string> | null;
    /**
     * Total amount of results to return
     */
    limit?: number | null;
    /**
     * Offset where to start returning results
     */
    offset?: number | null;
    /**
     * Direction of the ordering of results
     */
    order_direction?: OrderDirection;
    /**
     * User ID. Automatically populated with your ID
     */
    user_id?: string | null;
  };
};

export type DeleteWalletsResponse = number;

export type DeleteWalletsError = ErrorResponse;

export type ListWalletOverviewsResponse = Array<WalletOverview>;

export type ListWalletOverviewsError = ErrorResponse;

export type GetWalletData = {
  path: {
    id: string;
  };
};

export type GetWalletResponse = WalletResponse;

export type GetWalletError = ErrorResponse;

export type DeleteWalletData = {
  path: {
    id: string;
  };
};

export type DeleteWalletResponse = unknown;

export type DeleteWalletError = ErrorResponse;

export type ListApiKeysResponseTransformer = (data: any) => Promise<ListApiKeysResponse>;

export type ApiKeyResponseModelResponseTransformer = (data: any) => ApiKeyResponse;

export const ApiKeyResponseModelResponseTransformer: ApiKeyResponseModelResponseTransformer = (data) => {
  if (data?.created_at) {
    data.created_at = new Date(data.created_at);
  }
  if (data?.expires_at) {
    data.expires_at = new Date(data.expires_at);
  }
  return data;
};

export const ListApiKeysResponseTransformer: ListApiKeysResponseTransformer = async (data) => {
  if (Array.isArray(data)) {
    data.forEach(ApiKeyResponseModelResponseTransformer);
  }
  return data;
};

export type CreateApiKeyResponseTransformer = (data: any) => Promise<CreateApiKeyResponse>;

export const CreateApiKeyResponseTransformer: CreateApiKeyResponseTransformer = async (data) => {
  ApiKeyResponseModelResponseTransformer(data);
  return data;
};

export type GetApiKeyResponseTransformer = (data: any) => Promise<GetApiKeyResponse>;

export const GetApiKeyResponseTransformer: GetApiKeyResponseTransformer = async (data) => {
  ApiKeyResponseModelResponseTransformer(data);
  return data;
};

export type ListInvoicesResponseTransformer = (data: any) => Promise<ListInvoicesResponse>;

export type InvoiceResponseModelResponseTransformer = (data: any) => InvoiceResponse;

export const InvoiceResponseModelResponseTransformer: InvoiceResponseModelResponseTransformer = (data) => {
  if (data?.created_at) {
    data.created_at = new Date(data.created_at);
  }
  if (data?.payment_time) {
    data.payment_time = new Date(data.payment_time);
  }
  if (data?.timestamp) {
    data.timestamp = new Date(data.timestamp);
  }
  if (data?.updated_at) {
    data.updated_at = new Date(data.updated_at);
  }
  return data;
};

export const ListInvoicesResponseTransformer: ListInvoicesResponseTransformer = async (data) => {
  if (Array.isArray(data)) {
    data.forEach(InvoiceResponseModelResponseTransformer);
  }
  return data;
};

export type GenerateInvoiceResponseTransformer = (data: any) => Promise<GenerateInvoiceResponse>;

export const GenerateInvoiceResponseTransformer: GenerateInvoiceResponseTransformer = async (data) => {
  InvoiceResponseModelResponseTransformer(data);
  return data;
};

export type GetInvoiceResponseTransformer = (data: any) => Promise<GetInvoiceResponse>;

export const GetInvoiceResponseTransformer: GetInvoiceResponseTransformer = async (data) => {
  InvoiceResponseModelResponseTransformer(data);
  return data;
};

export type ListAddressesResponseTransformer = (data: any) => Promise<ListAddressesResponse>;

export type LnAddressModelResponseTransformer = (data: any) => LnAddress;

export const LnAddressModelResponseTransformer: LnAddressModelResponseTransformer = (data) => {
  if (data?.created_at) {
    data.created_at = new Date(data.created_at);
  }
  if (data?.updated_at) {
    data.updated_at = new Date(data.updated_at);
  }
  return data;
};

export const ListAddressesResponseTransformer: ListAddressesResponseTransformer = async (data) => {
  if (Array.isArray(data)) {
    data.forEach(LnAddressModelResponseTransformer);
  }
  return data;
};

export type RegisterAddressResponseTransformer = (data: any) => Promise<RegisterAddressResponse>;

export const RegisterAddressResponseTransformer: RegisterAddressResponseTransformer = async (data) => {
  LnAddressModelResponseTransformer(data);
  return data;
};

export type GetAddressResponseTransformer = (data: any) => Promise<GetAddressResponse>;

export const GetAddressResponseTransformer: GetAddressResponseTransformer = async (data) => {
  LnAddressModelResponseTransformer(data);
  return data;
};

export type UpdateAddressResponseTransformer = (data: any) => Promise<UpdateAddressResponse>;

export const UpdateAddressResponseTransformer: UpdateAddressResponseTransformer = async (data) => {
  LnAddressModelResponseTransformer(data);
  return data;
};

export type GetUserWalletResponseTransformer = (data: any) => Promise<GetUserWalletResponse>;

export type WalletResponseModelResponseTransformer = (data: any) => WalletResponse;

export type ContactModelResponseTransformer = (data: any) => Contact;

export const ContactModelResponseTransformer: ContactModelResponseTransformer = (data) => {
  if (data?.contact_since) {
    data.contact_since = new Date(data.contact_since);
  }
  return data;
};

export type PaymentResponseModelResponseTransformer = (data: any) => PaymentResponse;

export const PaymentResponseModelResponseTransformer: PaymentResponseModelResponseTransformer = (data) => {
  if (data?.created_at) {
    data.created_at = new Date(data.created_at);
  }
  if (data?.payment_time) {
    data.payment_time = new Date(data.payment_time);
  }
  if (data?.updated_at) {
    data.updated_at = new Date(data.updated_at);
  }
  return data;
};

export const WalletResponseModelResponseTransformer: WalletResponseModelResponseTransformer = (data) => {
  if (Array.isArray(data?.contacts)) {
    data.contacts.forEach(ContactModelResponseTransformer);
  }
  if (data?.created_at) {
    data.created_at = new Date(data.created_at);
  }
  if (Array.isArray(data?.invoices)) {
    data.invoices.forEach(InvoiceResponseModelResponseTransformer);
  }
  if (Array.isArray(data?.payments)) {
    data.payments.forEach(PaymentResponseModelResponseTransformer);
  }
  if (data?.updated_at) {
    data.updated_at = new Date(data.updated_at);
  }
  return data;
};

export const GetUserWalletResponseTransformer: GetUserWalletResponseTransformer = async (data) => {
  WalletResponseModelResponseTransformer(data);
  return data;
};

export type ListWalletApiKeysResponseTransformer = (data: any) => Promise<ListWalletApiKeysResponse>;

export const ListWalletApiKeysResponseTransformer: ListWalletApiKeysResponseTransformer = async (data) => {
  if (Array.isArray(data)) {
    data.forEach(ApiKeyResponseModelResponseTransformer);
  }
  return data;
};

export type CreateWalletApiKeyResponseTransformer = (data: any) => Promise<CreateWalletApiKeyResponse>;

export const CreateWalletApiKeyResponseTransformer: CreateWalletApiKeyResponseTransformer = async (data) => {
  ApiKeyResponseModelResponseTransformer(data);
  return data;
};

export type GetWalletApiKeyResponseTransformer = (data: any) => Promise<GetWalletApiKeyResponse>;

export const GetWalletApiKeyResponseTransformer: GetWalletApiKeyResponseTransformer = async (data) => {
  ApiKeyResponseModelResponseTransformer(data);
  return data;
};

export type ListContactsResponseTransformer = (data: any) => Promise<ListContactsResponse>;

export const ListContactsResponseTransformer: ListContactsResponseTransformer = async (data) => {
  if (Array.isArray(data)) {
    data.forEach(ContactModelResponseTransformer);
  }
  return data;
};

export type ListWalletInvoicesResponseTransformer = (data: any) => Promise<ListWalletInvoicesResponse>;

export const ListWalletInvoicesResponseTransformer: ListWalletInvoicesResponseTransformer = async (data) => {
  if (Array.isArray(data)) {
    data.forEach(InvoiceResponseModelResponseTransformer);
  }
  return data;
};

export type NewWalletInvoiceResponseTransformer = (data: any) => Promise<NewWalletInvoiceResponse>;

export const NewWalletInvoiceResponseTransformer: NewWalletInvoiceResponseTransformer = async (data) => {
  InvoiceResponseModelResponseTransformer(data);
  return data;
};

export type GetWalletInvoiceResponseTransformer = (data: any) => Promise<GetWalletInvoiceResponse>;

export const GetWalletInvoiceResponseTransformer: GetWalletInvoiceResponseTransformer = async (data) => {
  InvoiceResponseModelResponseTransformer(data);
  return data;
};

export type GetWalletAddressResponseTransformer = (data: any) => Promise<GetWalletAddressResponse>;

export const GetWalletAddressResponseTransformer: GetWalletAddressResponseTransformer = async (data) => {
  LnAddressModelResponseTransformer(data);
  return data;
};

export type UpdateWalletAddressResponseTransformer = (data: any) => Promise<UpdateWalletAddressResponse>;

export const UpdateWalletAddressResponseTransformer: UpdateWalletAddressResponseTransformer = async (data) => {
  LnAddressModelResponseTransformer(data);
  return data;
};

export type RegisterWalletAddressResponseTransformer = (data: any) => Promise<RegisterWalletAddressResponse>;

export const RegisterWalletAddressResponseTransformer: RegisterWalletAddressResponseTransformer = async (data) => {
  LnAddressModelResponseTransformer(data);
  return data;
};

export type ListWalletPaymentsResponseTransformer = (data: any) => Promise<ListWalletPaymentsResponse>;

export const ListWalletPaymentsResponseTransformer: ListWalletPaymentsResponseTransformer = async (data) => {
  if (Array.isArray(data)) {
    data.forEach(PaymentResponseModelResponseTransformer);
  }
  return data;
};

export type WalletPayResponseTransformer = (data: any) => Promise<WalletPayResponse>;

export const WalletPayResponseTransformer: WalletPayResponseTransformer = async (data) => {
  PaymentResponseModelResponseTransformer(data);
  return data;
};

export type GetWalletPaymentResponseTransformer = (data: any) => Promise<GetWalletPaymentResponse>;

export const GetWalletPaymentResponseTransformer: GetWalletPaymentResponseTransformer = async (data) => {
  PaymentResponseModelResponseTransformer(data);
  return data;
};

export type ListPaymentsResponseTransformer = (data: any) => Promise<ListPaymentsResponse>;

export const ListPaymentsResponseTransformer: ListPaymentsResponseTransformer = async (data) => {
  if (Array.isArray(data)) {
    data.forEach(PaymentResponseModelResponseTransformer);
  }
  return data;
};

export type PayResponseTransformer = (data: any) => Promise<PayResponse>;

export const PayResponseTransformer: PayResponseTransformer = async (data) => {
  PaymentResponseModelResponseTransformer(data);
  return data;
};

export type GetPaymentResponseTransformer = (data: any) => Promise<GetPaymentResponse>;

export const GetPaymentResponseTransformer: GetPaymentResponseTransformer = async (data) => {
  PaymentResponseModelResponseTransformer(data);
  return data;
};

export type ListWalletsResponseTransformer = (data: any) => Promise<ListWalletsResponse>;

export const ListWalletsResponseTransformer: ListWalletsResponseTransformer = async (data) => {
  if (Array.isArray(data)) {
    data.forEach(WalletResponseModelResponseTransformer);
  }
  return data;
};

export type RegisterWalletResponseTransformer = (data: any) => Promise<RegisterWalletResponse>;

export const RegisterWalletResponseTransformer: RegisterWalletResponseTransformer = async (data) => {
  WalletResponseModelResponseTransformer(data);
  return data;
};

export type ListWalletOverviewsResponseTransformer = (data: any) => Promise<ListWalletOverviewsResponse>;

export type WalletOverviewModelResponseTransformer = (data: any) => WalletOverview;

export const WalletOverviewModelResponseTransformer: WalletOverviewModelResponseTransformer = (data) => {
  if (data?.created_at) {
    data.created_at = new Date(data.created_at);
  }
  if (data?.updated_at) {
    data.updated_at = new Date(data.updated_at);
  }
  return data;
};

export const ListWalletOverviewsResponseTransformer: ListWalletOverviewsResponseTransformer = async (data) => {
  if (Array.isArray(data)) {
    data.forEach(WalletOverviewModelResponseTransformer);
  }
  return data;
};

export type GetWalletResponseTransformer = (data: any) => Promise<GetWalletResponse>;

export const GetWalletResponseTransformer: GetWalletResponseTransformer = async (data) => {
  WalletResponseModelResponseTransformer(data);
  return data;
};
