// This file is auto-generated by @hey-api/openapi-ts

/**
 * API Key Response
 */
export type ApiKeyResponse = {
  /**
   * Date of creation in database
   */
  created_at: Date;
  /**
   * API key description
   */
  description?: string | null;
  /**
   * Date of expiration
   */
  expires_at?: Date | null;
  /**
   * Internal ID
   */
  id: string;
  /**
   * API key (only returned once on creation, save it securely as it cannot be retrieved)
   */
  key?: string | null;
  /**
   * API key name
   */
  name: string;
  /**
   * List of permissions for this API key
   */
  permissions: Array<Permission>;
  /**
   * User ID
   */
  user_id: string;
};

export type Balance = {
  /**
   * Amount available to spend
   */
  available_msat: number;
  /**
   * Total fees paid
   */
  fees_paid_msat: number;
  /**
   * Total amount received
   */
  received_msat: number;
  /**
   * Total amount sent
   */
  sent_msat: number;
};

export type CheckMessageRequest = {
  /**
   * Original message
   */
  message: string;
  /**
   * Node public key
   */
  pubkey: string;
  /**
   * zbase encoded signature
   */
  signature: string;
};

export type CheckMessageResponse = {
  /**
   * Signature validity
   */
  is_valid: boolean;
};

export type ConnectLspRequest = {
  /**
   * LSP ID
   */
  lsp_id: string;
};

export type Contact = {
  /**
   * Date of first payment to this contact
   */
  contact_since: Date;
  /**
   * Lightning Address
   */
  ln_address: string;
};

/**
 * Create API Key Request
 */
export type CreateApiKeyRequest = {
  /**
   * API key description
   */
  description?: string | null;
  /**
   * Expiration time in seconds
   */
  expiry?: number | null;
  /**
   * API key name
   */
  name: string;
  /**
   * List of permissions for this API key
   */
  permissions: Array<Permission>;
  /**
   * User ID. Will be populated with your own ID by default
   */
  user_id?: string | null;
};

export type Currency = 'Bitcoin' | 'BitcoinTestnet' | 'Regtest' | 'Simnet' | 'Signet';

export const Currency = {
  BITCOIN: 'Bitcoin',
  BITCOIN_TESTNET: 'BitcoinTestnet',
  REGTEST: 'Regtest',
  SIMNET: 'Simnet',
  SIGNET: 'Signet',
} as const;

/**
 * Application Error Response
 */
export type ErrorResponse = {
  /**
   * Error reason
   */
  reason: string;
  /**
   * Error status
   */
  status: string;
};

/**
 * App Health Information
 */
export type HealthCheck = {
  /**
   * Health of the database
   */
  database: HealthStatus;
  /**
   * Whether the system is healthy and can be used
   */
  is_healthy: boolean;
  /**
   * Health of the Lightning provider service
   */
  ln_provider: HealthStatus;
};

export type HealthStatus = 'Operational' | 'Unavailable' | 'Maintenance';

export const HealthStatus = {
  OPERATIONAL: 'Operational',
  UNAVAILABLE: 'Unavailable',
  MAINTENANCE: 'Maintenance',
} as const;

export type InvoiceOrderBy = 'CreatedAt' | 'PaymentTime' | 'UpdatedAt';

export const InvoiceOrderBy = {
  CREATED_AT: 'CreatedAt',
  PAYMENT_TIME: 'PaymentTime',
  UPDATED_AT: 'UpdatedAt',
} as const;

export type InvoiceResponse = {
  /**
   * Amount requested in millisatoshis.
   */
  amount_msat?: number | null;
  /**
   * Amount received in millisatoshis.
   */
  amount_received_msat?: number | null;
  /**
   * Date of creation in database
   */
  created_at: Date;
  /**
   * Currency
   */
  currency: Currency;
  /**
   * Description
   */
  description?: string | null;
  /**
   * Fees paid. Populated when a new channel is opened to receive the funds.
   */
  fee_msat?: number | null;
  /**
   * Internal ID
   */
  id: string;
  /**
   * Ledger
   */
  ledger: Ledger;
  /**
   * Lightning Address. Populated when invoice is generated as part of the LNURL protocol
   */
  ln_address_id?: string | null;
  ln_invoice?: null | LnInvoiceResponse;
  /**
   * Payment time
   */
  payment_time?: Date | null;
  /**
   * Status
   */
  status: InvoiceStatus;
  /**
   * Date of creation on the LN node
   */
  timestamp: Date;
  /**
   * Date of update in database
   */
  updated_at?: Date | null;
  /**
   * Wallet ID
   */
  wallet_id: string;
};

export type InvoiceStatus = 'Pending' | 'Settled' | 'Expired';

export const InvoiceStatus = {
  PENDING: 'Pending',
  SETTLED: 'Settled',
  EXPIRED: 'Expired',
} as const;

export type Ledger = 'Lightning' | 'Internal' | 'Onchain';

export const Ledger = {
  LIGHTNING: 'Lightning',
  INTERNAL: 'Internal',
  ONCHAIN: 'Onchain',
} as const;

/**
 * Lightning Address
 */
export type LnAddress = {
  /**
   * Active status. Inactive addresses cannot receive funds
   */
  active: boolean;
  /**
   * Nostr enabled
   */
  allows_nostr: boolean;
  /**
   * Date of creation in database
   */
  created_at: Date;
  /**
   * Internal ID
   */
  id: string;
  /**
   * Nostr Public key
   */
  nostr_pubkey?: string | null;
  /**
   * Date of update in database
   */
  updated_at?: Date | null;
  /**
   * Username
   */
  username: string;
  /**
   * Wallet ID
   */
  wallet_id: string;
};

export type LnInvoiceResponse = {
  /**
   * Bolt11
   */
  bolt11: string;
  /**
   * Description hash
   */
  description_hash?: string | null;
  /**
   * Date of expiry
   */
  expires_at: Date;
  /**
   * Duration of expiry in seconds since creation
   */
  expiry: string;
  /**
   * The minimum number of blocks the final hop in the route should wait before allowing the payment to be claimed. This is a security measure to ensure that the payment can be settled properly
   */
  min_final_cltv_expiry_delta: number;
  /**
   * Public key of the node receiving the funds
   */
  payee_pubkey: string;
  /**
   * Payment hash
   */
  payment_hash: string;
  /**
   * A secret value included in the payment request to mitigate certain types of attacks. The payment secret must be provided by the payer when making the payment
   */
  payment_secret: string;
};

export type LnUrlPayRequest = {
  /**
   * Nostr enabled
   */
  allowsNostr: boolean;
  /**
   * The URL from LN SERVICE to accept the pay request
   */
  callback: string;
  /**
   * Optional number of characters accepted for the `comment` query parameter on subsequent callback, defaults to 0 if not provided. (no comment allowed). See <https://github.com/lnurl/luds/blob/luds/12.md>
   */
  commentAllowed: number;
  /**
   * Max amount in milli-satoshis LN SERVICE is willing to receive
   */
  maxSendable: number;
  /**
   * Metadata json which must be presented as raw string here, this is required to pass signature verification at a later step
   */
  metadata: string;
  /**
   * Min amount in milli-satoshis LN SERVICE is willing to receive, can not be less than 1 or more than `maxSendable`
   */
  minSendable: number;
  /**
   * Nostr public key
   */
  nostrPubkey?: string | null;
  /**
   * Type of LNURL
   */
  tag: string;
};

export type LnUrlCallbackResponse = {
  /**
   * An optional flag to let a wallet know whether to persist the link from step 1, if null should be interpreted as true
   */
  disposable?: boolean | null;
  /**
   * bech32-serialized Lightning invoice
   */
  pr: string;
  /**
   * array with payment routes, should be left empty if no routes are to be provided
   */
  routes: Array<string>;
  /**
   * An optional action to be executed after successfully paying an invoice
   */
  successAction?: unknown;
};

export type LnUrlSuccessAction = {
  /**
   * Description
   */
  description?: string | null;
  /**
   * Message displayed to the user
   */
  message?: string | null;
  /**
   * Action type. One of `url` or `message`
   */
  tag: string;
  /**
   * URL for the user to open on success
   */
  url?: string | null;
};

/**
 * New Invoice Request
 */
export type NewInvoiceRequest = {
  /**
   * Amount in millisatoshis
   */
  amount_msat: number;
  /**
   * Description of the invoice. Visible by the payer
   */
  description?: string | null;
  /**
   * Expiration time in seconds
   */
  expiry?: number | null;
  /**
   * User ID. Will be populated with your own ID by default
   */
  wallet_id?: string | null;
};

export type NostrNip05Response = {
  /**
   * Found names
   */
  names: {
    [key: string]: string;
  };
};

export type OrderDirection = 'Asc' | 'Desc';

export const OrderDirection = {
  ASC: 'Asc',
  DESC: 'Desc',
} as const;

export type PaymentResponse = {
  /**
   * Amount in millisatoshis.
   */
  amount_msat: number;
  /**
   * Date of creation in database
   */
  created_at: Date;
  /**
   * Currency
   */
  currency: Currency;
  /**
   * Description
   */
  description?: string | null;
  /**
   * Error message
   */
  error?: string | null;
  /**
   * Fees paid. Populated when a new channel is opened to receive the funds
   */
  fee_msat?: number | null;
  /**
   * Internal ID
   */
  id: string;
  /**
   * Ledger
   */
  ledger: Ledger;
  /**
   * Lightning Address. Populated when sending to a LN Address
   */
  ln_address?: string | null;
  /**
   * Metadata
   */
  metadata?: string | null;
  /**
   * Payment hash
   */
  payment_hash?: string | null;
  /**
   * Payment Preimage
   */
  payment_preimage?: string | null;
  /**
   * Payment time
   */
  payment_time?: Date | null;
  /**
   * Status
   */
  status: PaymentStatus;
  success_action?: null | LnUrlSuccessAction;
  /**
   * Date of update in database
   */
  updated_at?: Date | null;
  /**
   * Wallet ID
   */
  wallet_id: string;
};

export type PaymentStatus = 'Pending' | 'Settled' | 'Failed';

export const PaymentStatus = {
  PENDING: 'Pending',
  SETTLED: 'Settled',
  FAILED: 'Failed',
} as const;

export type Permission =
  | 'read:wallet'
  | 'write:wallet'
  | 'read:ln_address'
  | 'write:ln_address'
  | 'read:transaction'
  | 'write:transaction'
  | 'read:ln_node'
  | 'write:ln_node'
  | 'read:api_key'
  | 'write:api_key';

export const Permission = {
  'READ:WALLET': 'read:wallet',
  'WRITE:WALLET': 'write:wallet',
  'READ:LN_ADDRESS': 'read:ln_address',
  'WRITE:LN_ADDRESS': 'write:ln_address',
  'READ:TRANSACTION': 'read:transaction',
  'WRITE:TRANSACTION': 'write:transaction',
  'READ:LN_NODE': 'read:ln_node',
  'WRITE:LN_NODE': 'write:ln_node',
  'READ:API_KEY': 'read:api_key',
  'WRITE:API_KEY': 'write:api_key',
} as const;

export type RedeemOnchainRequest = {
  /**
   * Fee rate in sats/vb
   */
  feerate: number;
  /**
   * Recipient BTC address
   */
  to_address: string;
};

export type RedeemOnchainResponse = {
  /**
   * Transaction ID
   */
  txid: string;
};

export type RegisterLnAddressRequest = {
  /**
   * Nostr enabled
   */
  allows_nostr?: boolean;
  /**
   * Nostr public key
   */
  nostr_pubkey?: string | null;
  /**
   * Username such as `username@domain`
   */
  username: string;
  /**
   * Wallet ID. Will be populated with your own ID by default
   */
  wallet_id?: string | null;
};

/**
 * Register Wallet Request
 */
export type RegisterWalletRequest = {
  /**
   * User ID. Should ideally be registered in your Auth provider.
   */
  user_id: string;
};

/**
 * Send On-chain Payment Request
 */
export type SendOnchainPaymentRequest = {
  /**
   * Amount in millisatoshis
   */
  amount_msat: number;
  /**
   * Fee rate in sats/vb
   */
  feerate: number;
  /**
   * Recipient Bitcoin address
   */
  recipient_address: string;
};

/**
 * Send Payment Request
 */
export type SendPaymentRequest = {
  /**
   * Amount in millisatoshis. Only necessary if the input does not specify an amount (empty Bolt11, LNURL or LN Address)
   */
  amount_msat?: number | null;
  /**
   * Comment of the payment. Visible by the recipient for LNURL payments
   */
  comment?: string | null;
  /**
   * Recipient. Can be a Bolt11 invoice, LNURL or LN Address. Keysend and On-chain payments not yet supported
   */
  input: string;
  /**
   * Wallet ID. Will be populated with your own ID by default
   */
  wallet_id?: string | null;
};

/**
 * App setup info
 */
export type SetupInfo = {
  /**
   * Whether the app is setup
   */
  complete: boolean;
};

/**
 * Sign In Request
 */
export type SignInRequest = {
  /**
   * User password
   */
  password: string;
};

/**
 * Sign In Response
 */
export type SignInResponse = {
  /**
   * JWT token
   */
  token: string;
};

export type SignMessageRequest = {
  /**
   * Message
   */
  message: string;
};

export type SignMessageResponse = {
  /**
   * zbase encoded signature
   */
  signature: string;
};

export type UpdateLnAddressRequest = {
  /**
   * Active status
   */
  active?: boolean | null;
  /**
   * Nostr enabled
   */
  allows_nostr?: boolean | null;
  /**
   * Nostr public key
   */
  nostr_pubkey?: string | null;
  /**
   * Username such as `username@domain`
   */
  username?: string | null;
};

/**
 * App version info
 */
export type VersionInfo = {
  /**
   * Build time of the software
   */
  build_time: string;
  /**
   * Current version of the software
   */
  version: string;
};

export type WalletLnAddressResponse = {
  ln_address?: null | LnAddress;
};

export type WalletOverview = {
  /**
   * User Balance
   */
  balance: Balance;
  /**
   * Date of creation in database
   */
  created_at: Date;
  /**
   * Internal ID
   */
  id: string;
  ln_address?: null | LnAddress;
  /**
   * Number of contacts
   */
  n_contacts: number;
  /**
   * Number of invoices
   */
  n_invoices: number;
  /**
   * Number of payments
   */
  n_payments: number;
  /**
   * Date of update in database
   */
  updated_at?: Date | null;
  /**
   * User ID. Populated from the Authentication method,  such as JWT subject
   */
  user_id: string;
};

export type WalletResponse = {
  /**
   * User Balance
   */
  balance: Balance;
  /**
   * List of contacts
   */
  contacts: Array<Contact>;
  /**
   * Date of creation in database
   */
  created_at: Date;
  /**
   * Internal ID
   */
  id: string;
  /**
   * Lit of Invoices
   */
  invoices: Array<InvoiceResponse>;
  ln_address?: null | LnAddress;
  /**
   * List of payments
   */
  payments: Array<PaymentResponse>;
  /**
   * Date of update in database
   */
  updated_at?: Date | null;
  /**
   * User ID. Populated from the Authentication method,  such as JWT subject
   */
  user_id: string;
};

export type WellKnownData = {
  body?: never;
  path: {
    username: string;
  };
  query?: never;
  url: '/.well-known/lnurlp/{username}';
};

export type WellKnownErrors = {
  /**
   * Not Found
   */
  404: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type WellKnownError = WellKnownErrors[keyof WellKnownErrors];

export type WellKnownResponses = {
  /**
   * Found
   */
  200: LnUrlPayRequest;
};

export type WellKnownResponse = WellKnownResponses[keyof WellKnownResponses];

export type WellKnownNostrData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Username to query
     */
    name?: string;
  };
  url: '/.well-known/nostr.json';
};

export type WellKnownNostrErrors = {
  /**
   * Not Found
   */
  404: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type WellKnownNostrError = WellKnownNostrErrors[keyof WellKnownNostrErrors];

export type WellKnownNostrResponses = {
  /**
   * Found
   */
  200: NostrNip05Response;
};

export type WellKnownNostrResponse = WellKnownNostrResponses[keyof WellKnownNostrResponses];

export type CallbackData = {
  body?: never;
  path: {
    username: string;
  };
  query: {
    /**
     * Amount in millisatoshis
     */
    amount: number;
    /**
     * Optional comment for the recipient
     */
    comment?: string | null;
  };
  url: '/lnurlp/{username}/callback';
};

export type CallbackErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
  /**
   * Unprocessable Entity
   */
  422: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type CallbackError = CallbackErrors[keyof CallbackErrors];

export type CallbackResponses = {
  /**
   * Found
   */
  200: LnUrlCallbackResponse;
};

export type CallbackResponse = CallbackResponses[keyof CallbackResponses];

export type RevokeApiKeysData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Total amount of results to return
     */
    limit?: number | null;
    /**
     * Offset where to start returning results
     */
    offset?: number | null;
    /**
     * List of IDs
     */
    ids?: Array<string> | null;
    /**
     * User ID. Automatically populated with your ID
     */
    user_id?: string | null;
    /**
     * Direction of the ordering of results
     */
    order_direction?: OrderDirection;
  };
  url: '/v1/api-keys';
};

export type RevokeApiKeysErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type RevokeApiKeysError = RevokeApiKeysErrors[keyof RevokeApiKeysErrors];

export type RevokeApiKeysResponses = {
  /**
   * Success
   */
  200: number;
};

export type RevokeApiKeysResponse = RevokeApiKeysResponses[keyof RevokeApiKeysResponses];

export type ListApiKeysData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Total amount of results to return
     */
    limit?: number | null;
    /**
     * Offset where to start returning results
     */
    offset?: number | null;
    /**
     * List of IDs
     */
    ids?: Array<string> | null;
    /**
     * User ID. Automatically populated with your ID
     */
    user_id?: string | null;
    /**
     * Direction of the ordering of results
     */
    order_direction?: OrderDirection;
  };
  url: '/v1/api-keys';
};

export type ListApiKeysErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type ListApiKeysError = ListApiKeysErrors[keyof ListApiKeysErrors];

export type ListApiKeysResponses = {
  /**
   * Success
   */
  200: Array<ApiKeyResponse>;
};

export type ListApiKeysResponse = ListApiKeysResponses[keyof ListApiKeysResponses];

export type CreateApiKeyData = {
  body: CreateApiKeyRequest;
  path?: never;
  query?: never;
  url: '/v1/api-keys';
};

export type CreateApiKeyErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Unprocessable Entity
   */
  422: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type CreateApiKeyError = CreateApiKeyErrors[keyof CreateApiKeyErrors];

export type CreateApiKeyResponses = {
  /**
   * API Key Created
   */
  200: ApiKeyResponse;
};

export type CreateApiKeyResponse = CreateApiKeyResponses[keyof CreateApiKeyResponses];

export type RevokeApiKeyData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/v1/api-keys/{id}';
};

export type RevokeApiKeyErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type RevokeApiKeyError = RevokeApiKeyErrors[keyof RevokeApiKeyErrors];

export type RevokeApiKeyResponses = {
  /**
   * Revoked
   */
  200: unknown;
};

export type GetApiKeyData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/v1/api-keys/{id}';
};

export type GetApiKeyErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type GetApiKeyError = GetApiKeyErrors[keyof GetApiKeyErrors];

export type GetApiKeyResponses = {
  /**
   * Found
   */
  200: ApiKeyResponse;
};

export type GetApiKeyResponse = GetApiKeyResponses[keyof GetApiKeyResponses];

export type SignInData = {
  body: SignInRequest;
  path?: never;
  query?: never;
  url: '/v1/auth/sign-in';
};

export type SignInErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Unsupported
   */
  405: ErrorResponse;
};

export type SignInError = SignInErrors[keyof SignInErrors];

export type SignInResponses = {
  /**
   * Token Created
   */
  200: SignInResponse;
};

export type SignInResponse2 = SignInResponses[keyof SignInResponses];

export type DeleteInvoicesData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Total amount of results to return
     */
    limit?: number | null;
    /**
     * Offset where to start returning results
     */
    offset?: number | null;
    /**
     * List of IDs
     */
    ids?: Array<string> | null;
    /**
     * Wallet ID. Automatically populated with your ID
     */
    wallet_id?: string | null;
    /**
     * Status
     */
    status?: null | InvoiceStatus;
    /**
     * Ledger
     */
    ledger?: null | Ledger;
    /**
     * Order by
     */
    order_by?: InvoiceOrderBy;
    /**
     * Direction of the ordering of results
     */
    order_direction?: OrderDirection;
  };
  url: '/v1/invoices';
};

export type DeleteInvoicesErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type DeleteInvoicesError = DeleteInvoicesErrors[keyof DeleteInvoicesErrors];

export type DeleteInvoicesResponses = {
  /**
   * Success
   */
  200: number;
};

export type DeleteInvoicesResponse = DeleteInvoicesResponses[keyof DeleteInvoicesResponses];

export type ListInvoicesData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Total amount of results to return
     */
    limit?: number | null;
    /**
     * Offset where to start returning results
     */
    offset?: number | null;
    /**
     * List of IDs
     */
    ids?: Array<string> | null;
    /**
     * Wallet ID. Automatically populated with your ID
     */
    wallet_id?: string | null;
    /**
     * Status
     */
    status?: null | InvoiceStatus;
    /**
     * Ledger
     */
    ledger?: null | Ledger;
    /**
     * Order by
     */
    order_by?: InvoiceOrderBy;
    /**
     * Direction of the ordering of results
     */
    order_direction?: OrderDirection;
  };
  url: '/v1/invoices';
};

export type ListInvoicesErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type ListInvoicesError = ListInvoicesErrors[keyof ListInvoicesErrors];

export type ListInvoicesResponses = {
  /**
   * Success
   */
  200: Array<InvoiceResponse>;
};

export type ListInvoicesResponse = ListInvoicesResponses[keyof ListInvoicesResponses];

export type GenerateInvoiceData = {
  body: NewInvoiceRequest;
  path?: never;
  query?: never;
  url: '/v1/invoices';
};

export type GenerateInvoiceErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Unprocessable Entity
   */
  422: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type GenerateInvoiceError = GenerateInvoiceErrors[keyof GenerateInvoiceErrors];

export type GenerateInvoiceResponses = {
  /**
   * Invoice Created
   */
  200: InvoiceResponse;
};

export type GenerateInvoiceResponse = GenerateInvoiceResponses[keyof GenerateInvoiceResponses];

export type DeleteInvoiceData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/v1/invoices/{id}';
};

export type DeleteInvoiceErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type DeleteInvoiceError = DeleteInvoiceErrors[keyof DeleteInvoiceErrors];

export type DeleteInvoiceResponses = {
  /**
   * Deleted
   */
  200: unknown;
};

export type GetInvoiceData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/v1/invoices/{id}';
};

export type GetInvoiceErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type GetInvoiceError = GetInvoiceErrors[keyof GetInvoiceErrors];

export type GetInvoiceResponses = {
  /**
   * Found
   */
  200: InvoiceResponse;
};

export type GetInvoiceResponse = GetInvoiceResponses[keyof GetInvoiceResponses];

export type DeleteAddressesData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Total amount of results to return
     */
    limit?: number | null;
    /**
     * Offset where to start returning results
     */
    offset?: number | null;
    /**
     * List of IDs
     */
    ids?: Array<string> | null;
    /**
     * wallet ID. Automatically populated with your ID
     */
    wallet_id?: string | null;
    /**
     * Username
     */
    username?: string | null;
    /**
     * Active
     */
    active?: boolean | null;
    /**
     * Direction of the ordering of results
     */
    order_direction?: OrderDirection;
  };
  url: '/v1/lightning-addresses';
};

export type DeleteAddressesErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type DeleteAddressesError = DeleteAddressesErrors[keyof DeleteAddressesErrors];

export type DeleteAddressesResponses = {
  /**
   * Success
   */
  200: number;
};

export type DeleteAddressesResponse = DeleteAddressesResponses[keyof DeleteAddressesResponses];

export type ListAddressesData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Total amount of results to return
     */
    limit?: number | null;
    /**
     * Offset where to start returning results
     */
    offset?: number | null;
    /**
     * List of IDs
     */
    ids?: Array<string> | null;
    /**
     * wallet ID. Automatically populated with your ID
     */
    wallet_id?: string | null;
    /**
     * Username
     */
    username?: string | null;
    /**
     * Active
     */
    active?: boolean | null;
    /**
     * Direction of the ordering of results
     */
    order_direction?: OrderDirection;
  };
  url: '/v1/lightning-addresses';
};

export type ListAddressesErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type ListAddressesError = ListAddressesErrors[keyof ListAddressesErrors];

export type ListAddressesResponses = {
  /**
   * Success
   */
  200: Array<LnAddress>;
};

export type ListAddressesResponse = ListAddressesResponses[keyof ListAddressesResponses];

export type RegisterAddressData = {
  body: RegisterLnAddressRequest;
  path?: never;
  query?: never;
  url: '/v1/lightning-addresses';
};

export type RegisterAddressErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Unprocessable Entity
   */
  422: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type RegisterAddressError = RegisterAddressErrors[keyof RegisterAddressErrors];

export type RegisterAddressResponses = {
  /**
   * LN Address Registered
   */
  200: LnAddress;
};

export type RegisterAddressResponse = RegisterAddressResponses[keyof RegisterAddressResponses];

export type DeleteAddressData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/v1/lightning-addresses/{id}';
};

export type DeleteAddressErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type DeleteAddressError = DeleteAddressErrors[keyof DeleteAddressErrors];

export type DeleteAddressResponses = {
  /**
   * Deleted
   */
  200: unknown;
};

export type GetAddressData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/v1/lightning-addresses/{id}';
};

export type GetAddressErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type GetAddressError = GetAddressErrors[keyof GetAddressErrors];

export type GetAddressResponses = {
  /**
   * Found
   */
  200: LnAddress;
};

export type GetAddressResponse = GetAddressResponses[keyof GetAddressResponses];

export type UpdateAddressData = {
  body: UpdateLnAddressRequest;
  path: {
    id: string;
  };
  query?: never;
  url: '/v1/lightning-addresses/{id}';
};

export type UpdateAddressErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
  /**
   * Unprocessable Entity
   */
  422: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type UpdateAddressError = UpdateAddressErrors[keyof UpdateAddressErrors];

export type UpdateAddressResponses = {
  /**
   * LN Address Updated
   */
  200: LnAddress;
};

export type UpdateAddressResponse = UpdateAddressResponses[keyof UpdateAddressResponses];

export type BackupData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/v1/lightning-node/backup';
};

export type BackupErrors = {
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type BackupError = BackupErrors[keyof BackupErrors];

export type BackupResponses = {
  /**
   * Backup Downloaded
   */
  200: Blob | File;
};

export type BackupResponse = BackupResponses[keyof BackupResponses];

export type CheckMessageData = {
  body: CheckMessageRequest;
  path?: never;
  query?: never;
  url: '/v1/lightning-node/check-message';
};

export type CheckMessageErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type CheckMessageError = CheckMessageErrors[keyof CheckMessageErrors];

export type CheckMessageResponses = {
  /**
   * Message Verified
   */
  200: CheckMessageResponse;
};

export type CheckMessageResponse2 = CheckMessageResponses[keyof CheckMessageResponses];

export type CloseLspChannelsData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/v1/lightning-node/close-channels';
};

export type CloseLspChannelsErrors = {
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type CloseLspChannelsError = CloseLspChannelsErrors[keyof CloseLspChannelsErrors];

export type CloseLspChannelsResponses = {
  /**
   * Channels Closed
   */
  200: Array<string>;
};

export type CloseLspChannelsResponse = CloseLspChannelsResponses[keyof CloseLspChannelsResponses];

export type ConnectLspData = {
  body: ConnectLspRequest;
  path?: never;
  query?: never;
  url: '/v1/lightning-node/connect-lsp';
};

export type ConnectLspErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type ConnectLspError = ConnectLspErrors[keyof ConnectLspErrors];

export type ConnectLspResponses = {
  /**
   * LSP Connected
   */
  200: unknown;
};

export type NodeInfoData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/v1/lightning-node/info';
};

export type NodeInfoErrors = {
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type NodeInfoError = NodeInfoErrors[keyof NodeInfoErrors];

export type NodeInfoResponses = {
  /**
   * Found
   */
  200: unknown;
};

export type LspInfoData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/v1/lightning-node/lsp-info';
};

export type LspInfoErrors = {
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type LspInfoError = LspInfoErrors[keyof LspInfoErrors];

export type LspInfoResponses = {
  /**
   * Found
   */
  200: unknown;
};

export type ListLspsData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/v1/lightning-node/lsps';
};

export type ListLspsErrors = {
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type ListLspsError = ListLspsErrors[keyof ListLspsErrors];

export type ListLspsResponses = {
  /**
   * Success
   */
  200: Array<unknown>;
};

export type ListLspsResponse = ListLspsResponses[keyof ListLspsResponses];

export type RedeemData = {
  body: RedeemOnchainRequest;
  path?: never;
  query?: never;
  url: '/v1/lightning-node/redeem';
};

export type RedeemErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type RedeemError = RedeemErrors[keyof RedeemErrors];

export type RedeemResponses = {
  /**
   * Redeem Success
   */
  200: RedeemOnchainResponse;
};

export type RedeemResponse = RedeemResponses[keyof RedeemResponses];

export type SignMessageData = {
  body: SignMessageRequest;
  path?: never;
  query?: never;
  url: '/v1/lightning-node/sign-message';
};

export type SignMessageErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type SignMessageError = SignMessageErrors[keyof SignMessageErrors];

export type SignMessageResponses = {
  /**
   * Message Signed
   */
  200: SignMessageResponse;
};

export type SignMessageResponse2 = SignMessageResponses[keyof SignMessageResponses];

export type SwapData = {
  body: SendOnchainPaymentRequest;
  path?: never;
  query?: never;
  url: '/v1/lightning-node/swap';
};

export type SwapErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type SwapError = SwapErrors[keyof SwapErrors];

export type SwapResponses = {
  /**
   * Swap Success
   */
  200: unknown;
};

export type SyncData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/v1/lightning-node/sync';
};

export type SyncErrors = {
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type SyncError = SyncErrors[keyof SyncErrors];

export type SyncResponses = {
  /**
   * Node Synced
   */
  200: unknown;
};

export type GetUserWalletData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/v1/me';
};

export type GetUserWalletErrors = {
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type GetUserWalletError = GetUserWalletErrors[keyof GetUserWalletErrors];

export type GetUserWalletResponses = {
  /**
   * Found
   */
  200: WalletResponse;
};

export type GetUserWalletResponse = GetUserWalletResponses[keyof GetUserWalletResponses];

export type RevokeWalletApiKeysData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Total amount of results to return
     */
    limit?: number | null;
    /**
     * Offset where to start returning results
     */
    offset?: number | null;
    /**
     * List of IDs
     */
    ids?: Array<string> | null;
    /**
     * User ID. Automatically populated with your ID
     */
    user_id?: string | null;
    /**
     * Direction of the ordering of results
     */
    order_direction?: OrderDirection;
  };
  url: '/v1/me/api-keys';
};

export type RevokeWalletApiKeysErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type RevokeWalletApiKeysError = RevokeWalletApiKeysErrors[keyof RevokeWalletApiKeysErrors];

export type RevokeWalletApiKeysResponses = {
  /**
   * Success
   */
  200: number;
};

export type RevokeWalletApiKeysResponse =
  RevokeWalletApiKeysResponses[keyof RevokeWalletApiKeysResponses];

export type ListWalletApiKeysData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Total amount of results to return
     */
    limit?: number | null;
    /**
     * Offset where to start returning results
     */
    offset?: number | null;
    /**
     * List of IDs
     */
    ids?: Array<string> | null;
    /**
     * User ID. Automatically populated with your ID
     */
    user_id?: string | null;
    /**
     * Direction of the ordering of results
     */
    order_direction?: OrderDirection;
  };
  url: '/v1/me/api-keys';
};

export type ListWalletApiKeysErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type ListWalletApiKeysError = ListWalletApiKeysErrors[keyof ListWalletApiKeysErrors];

export type ListWalletApiKeysResponses = {
  /**
   * Success
   */
  200: Array<ApiKeyResponse>;
};

export type ListWalletApiKeysResponse =
  ListWalletApiKeysResponses[keyof ListWalletApiKeysResponses];

export type CreateWalletApiKeyData = {
  body: CreateApiKeyRequest;
  path?: never;
  query?: never;
  url: '/v1/me/api-keys';
};

export type CreateWalletApiKeyErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Unprocessable Entity
   */
  422: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type CreateWalletApiKeyError = CreateWalletApiKeyErrors[keyof CreateWalletApiKeyErrors];

export type CreateWalletApiKeyResponses = {
  /**
   * API Key Created
   */
  200: ApiKeyResponse;
};

export type CreateWalletApiKeyResponse =
  CreateWalletApiKeyResponses[keyof CreateWalletApiKeyResponses];

export type RevokeWalletApiKeyData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/v1/me/api-keys/{id}';
};

export type RevokeWalletApiKeyErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type RevokeWalletApiKeyError = RevokeWalletApiKeyErrors[keyof RevokeWalletApiKeyErrors];

export type RevokeWalletApiKeyResponses = {
  /**
   * Revoked
   */
  200: unknown;
};

export type GetWalletApiKeyData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/v1/me/api-keys/{id}';
};

export type GetWalletApiKeyErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type GetWalletApiKeyError = GetWalletApiKeyErrors[keyof GetWalletApiKeyErrors];

export type GetWalletApiKeyResponses = {
  /**
   * Found
   */
  200: ApiKeyResponse;
};

export type GetWalletApiKeyResponse = GetWalletApiKeyResponses[keyof GetWalletApiKeyResponses];

export type GetWalletBalanceData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/v1/me/balance';
};

export type GetWalletBalanceErrors = {
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type GetWalletBalanceError = GetWalletBalanceErrors[keyof GetWalletBalanceErrors];

export type GetWalletBalanceResponses = {
  /**
   * Found
   */
  200: Balance;
};

export type GetWalletBalanceResponse = GetWalletBalanceResponses[keyof GetWalletBalanceResponses];

export type ListContactsData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/v1/me/contacts';
};

export type ListContactsErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type ListContactsError = ListContactsErrors[keyof ListContactsErrors];

export type ListContactsResponses = {
  /**
   * Success
   */
  200: Array<Contact>;
};

export type ListContactsResponse = ListContactsResponses[keyof ListContactsResponses];

export type DeleteExpiredInvoicesData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/v1/me/invoices';
};

export type DeleteExpiredInvoicesErrors = {
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type DeleteExpiredInvoicesError =
  DeleteExpiredInvoicesErrors[keyof DeleteExpiredInvoicesErrors];

export type DeleteExpiredInvoicesResponses = {
  /**
   * Success
   */
  200: number;
};

export type DeleteExpiredInvoicesResponse =
  DeleteExpiredInvoicesResponses[keyof DeleteExpiredInvoicesResponses];

export type ListWalletInvoicesData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Total amount of results to return
     */
    limit?: number | null;
    /**
     * Offset where to start returning results
     */
    offset?: number | null;
    /**
     * List of IDs
     */
    ids?: Array<string> | null;
    /**
     * Wallet ID. Automatically populated with your ID
     */
    wallet_id?: string | null;
    /**
     * Status
     */
    status?: null | InvoiceStatus;
    /**
     * Ledger
     */
    ledger?: null | Ledger;
    /**
     * Order by
     */
    order_by?: InvoiceOrderBy;
    /**
     * Direction of the ordering of results
     */
    order_direction?: OrderDirection;
  };
  url: '/v1/me/invoices';
};

export type ListWalletInvoicesErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type ListWalletInvoicesError = ListWalletInvoicesErrors[keyof ListWalletInvoicesErrors];

export type ListWalletInvoicesResponses = {
  /**
   * Success
   */
  200: Array<InvoiceResponse>;
};

export type ListWalletInvoicesResponse =
  ListWalletInvoicesResponses[keyof ListWalletInvoicesResponses];

export type NewWalletInvoiceData = {
  body: NewInvoiceRequest;
  path?: never;
  query?: never;
  url: '/v1/me/invoices';
};

export type NewWalletInvoiceErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Unprocessable Entity
   */
  422: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type NewWalletInvoiceError = NewWalletInvoiceErrors[keyof NewWalletInvoiceErrors];

export type NewWalletInvoiceResponses = {
  /**
   * Invoice Created
   */
  200: InvoiceResponse;
};

export type NewWalletInvoiceResponse = NewWalletInvoiceResponses[keyof NewWalletInvoiceResponses];

export type GetWalletInvoiceData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/v1/me/invoices/{id}';
};

export type GetWalletInvoiceErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type GetWalletInvoiceError = GetWalletInvoiceErrors[keyof GetWalletInvoiceErrors];

export type GetWalletInvoiceResponses = {
  /**
   * Found
   */
  200: InvoiceResponse;
};

export type GetWalletInvoiceResponse = GetWalletInvoiceResponses[keyof GetWalletInvoiceResponses];

export type DeleteWalletAddressData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/v1/me/lightning-address';
};

export type DeleteWalletAddressErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type DeleteWalletAddressError = DeleteWalletAddressErrors[keyof DeleteWalletAddressErrors];

export type DeleteWalletAddressResponses = {
  /**
   * Deleted
   */
  200: unknown;
};

export type GetWalletAddressData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/v1/me/lightning-address';
};

export type GetWalletAddressErrors = {
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type GetWalletAddressError = GetWalletAddressErrors[keyof GetWalletAddressErrors];

export type GetWalletAddressResponses = {
  /**
   * Found
   */
  200: WalletLnAddressResponse;
};

export type GetWalletAddressResponse = GetWalletAddressResponses[keyof GetWalletAddressResponses];

export type RegisterWalletAddressData = {
  body: RegisterLnAddressRequest;
  path?: never;
  query?: never;
  url: '/v1/me/lightning-address';
};

export type RegisterWalletAddressErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Unprocessable Entity
   */
  422: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type RegisterWalletAddressError =
  RegisterWalletAddressErrors[keyof RegisterWalletAddressErrors];

export type RegisterWalletAddressResponses = {
  /**
   * LN Address Registered
   */
  200: LnAddress;
};

export type RegisterWalletAddressResponse =
  RegisterWalletAddressResponses[keyof RegisterWalletAddressResponses];

export type UpdateWalletAddressData = {
  body: UpdateLnAddressRequest;
  path?: never;
  query?: never;
  url: '/v1/me/lightning-address';
};

export type UpdateWalletAddressErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
  /**
   * Unprocessable Entity
   */
  422: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type UpdateWalletAddressError = UpdateWalletAddressErrors[keyof UpdateWalletAddressErrors];

export type UpdateWalletAddressResponses = {
  /**
   * LN Address Updated
   */
  200: LnAddress;
};

export type UpdateWalletAddressResponse =
  UpdateWalletAddressResponses[keyof UpdateWalletAddressResponses];

export type DeleteFailedPaymentsData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/v1/me/payments';
};

export type DeleteFailedPaymentsErrors = {
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type DeleteFailedPaymentsError =
  DeleteFailedPaymentsErrors[keyof DeleteFailedPaymentsErrors];

export type DeleteFailedPaymentsResponses = {
  /**
   * Success
   */
  200: number;
};

export type DeleteFailedPaymentsResponse =
  DeleteFailedPaymentsResponses[keyof DeleteFailedPaymentsResponses];

export type ListWalletPaymentsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Total amount of results to return
     */
    limit?: number | null;
    /**
     * Offset where to start returning results
     */
    offset?: number | null;
    /**
     * List of IDs
     */
    ids?: Array<string> | null;
    /**
     * Wallet ID. Automatically populated with your ID
     */
    wallet_id?: string | null;
    /**
     * Status
     */
    status?: null | PaymentStatus;
    /**
     * Ledger
     */
    ledger?: null | Ledger;
    /**
     * Direction of the ordering of results
     */
    order_direction?: OrderDirection;
  };
  url: '/v1/me/payments';
};

export type ListWalletPaymentsErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type ListWalletPaymentsError = ListWalletPaymentsErrors[keyof ListWalletPaymentsErrors];

export type ListWalletPaymentsResponses = {
  /**
   * Success
   */
  200: Array<PaymentResponse>;
};

export type ListWalletPaymentsResponse =
  ListWalletPaymentsResponses[keyof ListWalletPaymentsResponses];

export type WalletPayData = {
  body: SendPaymentRequest;
  path?: never;
  query?: never;
  url: '/v1/me/payments';
};

export type WalletPayErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Unprocessable Entity
   */
  422: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type WalletPayError = WalletPayErrors[keyof WalletPayErrors];

export type WalletPayResponses = {
  /**
   * Payment Sent
   */
  200: PaymentResponse;
};

export type WalletPayResponse = WalletPayResponses[keyof WalletPayResponses];

export type GetWalletPaymentData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/v1/me/payments/{id}';
};

export type GetWalletPaymentErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type GetWalletPaymentError = GetWalletPaymentErrors[keyof GetWalletPaymentErrors];

export type GetWalletPaymentResponses = {
  /**
   * Found
   */
  200: PaymentResponse;
};

export type GetWalletPaymentResponse = GetWalletPaymentResponses[keyof GetWalletPaymentResponses];

export type DeletePaymentsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Total amount of results to return
     */
    limit?: number | null;
    /**
     * Offset where to start returning results
     */
    offset?: number | null;
    /**
     * List of IDs
     */
    ids?: Array<string> | null;
    /**
     * Wallet ID. Automatically populated with your ID
     */
    wallet_id?: string | null;
    /**
     * Status
     */
    status?: null | PaymentStatus;
    /**
     * Ledger
     */
    ledger?: null | Ledger;
    /**
     * Direction of the ordering of results
     */
    order_direction?: OrderDirection;
  };
  url: '/v1/payments';
};

export type DeletePaymentsErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type DeletePaymentsError = DeletePaymentsErrors[keyof DeletePaymentsErrors];

export type DeletePaymentsResponses = {
  /**
   * Success
   */
  200: number;
};

export type DeletePaymentsResponse = DeletePaymentsResponses[keyof DeletePaymentsResponses];

export type ListPaymentsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Total amount of results to return
     */
    limit?: number | null;
    /**
     * Offset where to start returning results
     */
    offset?: number | null;
    /**
     * List of IDs
     */
    ids?: Array<string> | null;
    /**
     * Wallet ID. Automatically populated with your ID
     */
    wallet_id?: string | null;
    /**
     * Status
     */
    status?: null | PaymentStatus;
    /**
     * Ledger
     */
    ledger?: null | Ledger;
    /**
     * Direction of the ordering of results
     */
    order_direction?: OrderDirection;
  };
  url: '/v1/payments';
};

export type ListPaymentsErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type ListPaymentsError = ListPaymentsErrors[keyof ListPaymentsErrors];

export type ListPaymentsResponses = {
  /**
   * Success
   */
  200: Array<PaymentResponse>;
};

export type ListPaymentsResponse = ListPaymentsResponses[keyof ListPaymentsResponses];

export type PayData = {
  body: SendPaymentRequest;
  path?: never;
  query?: never;
  url: '/v1/payments';
};

export type PayErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Unprocessable Entity
   */
  422: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type PayError = PayErrors[keyof PayErrors];

export type PayResponses = {
  /**
   * Payment Sent
   */
  200: PaymentResponse;
};

export type PayResponse = PayResponses[keyof PayResponses];

export type DeletePaymentData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/v1/payments/{id}';
};

export type DeletePaymentErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type DeletePaymentError = DeletePaymentErrors[keyof DeletePaymentErrors];

export type DeletePaymentResponses = {
  /**
   * Deleted
   */
  200: unknown;
};

export type GetPaymentData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/v1/payments/{id}';
};

export type GetPaymentErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type GetPaymentError = GetPaymentErrors[keyof GetPaymentErrors];

export type GetPaymentResponses = {
  /**
   * Found
   */
  200: PaymentResponse;
};

export type GetPaymentResponse = GetPaymentResponses[keyof GetPaymentResponses];

export type HealthCheckData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/v1/system/health';
};

export type HealthCheckErrors = {
  /**
   * Service Unavailable
   */
  503: HealthCheck;
};

export type HealthCheckError = HealthCheckErrors[keyof HealthCheckErrors];

export type HealthCheckResponses = {
  /**
   * OK
   */
  200: HealthCheck;
};

export type HealthCheckResponse = HealthCheckResponses[keyof HealthCheckResponses];

export type ReadinessCheckData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/v1/system/ready';
};

export type ReadinessCheckResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type SetupCheckData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/v1/system/setup';
};

export type SetupCheckErrors = {
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type SetupCheckError = SetupCheckErrors[keyof SetupCheckErrors];

export type SetupCheckResponses = {
  /**
   * OK
   */
  200: SetupInfo;
};

export type SetupCheckResponse = SetupCheckResponses[keyof SetupCheckResponses];

export type VersionCheckData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/v1/system/version';
};

export type VersionCheckResponses = {
  /**
   * OK
   */
  200: VersionInfo;
};

export type VersionCheckResponse = VersionCheckResponses[keyof VersionCheckResponses];

export type DeleteWalletsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Total amount of results to return
     */
    limit?: number | null;
    /**
     * Offset where to start returning results
     */
    offset?: number | null;
    /**
     * List of IDs
     */
    ids?: Array<string> | null;
    /**
     * User ID. Automatically populated with your ID
     */
    user_id?: string | null;
    /**
     * Direction of the ordering of results
     */
    order_direction?: OrderDirection;
  };
  url: '/v1/wallets';
};

export type DeleteWalletsErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type DeleteWalletsError = DeleteWalletsErrors[keyof DeleteWalletsErrors];

export type DeleteWalletsResponses = {
  /**
   * Success
   */
  200: number;
};

export type DeleteWalletsResponse = DeleteWalletsResponses[keyof DeleteWalletsResponses];

export type ListWalletsData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/v1/wallets';
};

export type ListWalletsErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type ListWalletsError = ListWalletsErrors[keyof ListWalletsErrors];

export type ListWalletsResponses = {
  /**
   * Success
   */
  200: Array<WalletResponse>;
};

export type ListWalletsResponse = ListWalletsResponses[keyof ListWalletsResponses];

export type RegisterWalletData = {
  body: RegisterWalletRequest;
  path?: never;
  query?: never;
  url: '/v1/wallets';
};

export type RegisterWalletErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Unprocessable Entity
   */
  422: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type RegisterWalletError = RegisterWalletErrors[keyof RegisterWalletErrors];

export type RegisterWalletResponses = {
  /**
   * Wallet Created
   */
  200: WalletResponse;
};

export type RegisterWalletResponse = RegisterWalletResponses[keyof RegisterWalletResponses];

export type ListWalletOverviewsData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/v1/wallets/overviews';
};

export type ListWalletOverviewsErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type ListWalletOverviewsError = ListWalletOverviewsErrors[keyof ListWalletOverviewsErrors];

export type ListWalletOverviewsResponses = {
  /**
   * Success
   */
  200: Array<WalletOverview>;
};

export type ListWalletOverviewsResponse =
  ListWalletOverviewsResponses[keyof ListWalletOverviewsResponses];

export type DeleteWalletData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/v1/wallets/{id}';
};

export type DeleteWalletErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type DeleteWalletError = DeleteWalletErrors[keyof DeleteWalletErrors];

export type DeleteWalletResponses = {
  /**
   * Deleted
   */
  200: unknown;
};

export type GetWalletData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/v1/wallets/{id}';
};

export type GetWalletErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type GetWalletError = GetWalletErrors[keyof GetWalletErrors];

export type GetWalletResponses = {
  /**
   * Found
   */
  200: WalletResponse;
};

export type GetWalletResponse = GetWalletResponses[keyof GetWalletResponses];
