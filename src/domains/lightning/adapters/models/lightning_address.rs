//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;

use crate::domains::lightning::entities::LightningAddress;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "lightning_address")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    #[sea_orm(unique)]
    pub user_id: String,
    #[sea_orm(unique)]
    pub username: String,
    pub active: bool,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: Option<DateTimeWithTimeZone>,
    pub deleted_at: Option<DateTimeWithTimeZone>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::lightning_invoice::Entity")]
    LightningInvoice,
    #[sea_orm(has_many = "super::lightning_payment::Entity")]
    LightningPayment,
}

impl Related<super::lightning_invoice::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::LightningInvoice.def()
    }
}

impl Related<super::lightning_payment::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::LightningPayment.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

impl From<Model> for LightningAddress {
    fn from(model: Model) -> Self {
        LightningAddress {
            id: model.id,
            user_id: model.user_id,
            username: model.username,
            active: model.active,
            created_at: model.created_at,
            updated_at: model.updated_at,
            deleted_at: model.deleted_at,
        }
    }
}
