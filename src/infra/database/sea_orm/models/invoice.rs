//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.1

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "invoice")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub wallet_id: Uuid,
    #[sea_orm(unique)]
    pub payment_hash: Option<String>,
    pub ln_address_id: Option<Uuid>,
    #[sea_orm(unique)]
    pub bolt11: Option<String>,
    pub ledger: String,
    pub payee_pubkey: Option<String>,
    pub description: Option<String>,
    pub description_hash: Option<String>,
    pub amount_msat: Option<i64>,
    pub amount_received_msat: Option<i64>,
    pub currency: String,
    pub payment_secret: Option<String>,
    pub timestamp: DateTimeUtc,
    pub expiry: Option<i64>,
    pub min_final_cltv_expiry_delta: Option<i64>,
    pub fee_msat: Option<i64>,
    pub payment_time: Option<DateTimeUtc>,
    pub created_at: DateTimeUtc,
    pub updated_at: Option<DateTimeUtc>,
    pub expires_at: Option<DateTimeUtc>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::ln_address::Entity",
        from = "Column::LnAddressId",
        to = "super::ln_address::Column::Id",
        on_update = "NoAction",
        on_delete = "SetNull"
    )]
    LnAddress,
    #[sea_orm(
        belongs_to = "super::wallet::Entity",
        from = "Column::WalletId",
        to = "super::wallet::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Wallet,
}

impl Related<super::ln_address::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::LnAddress.def()
    }
}

impl Related<super::wallet::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Wallet.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
